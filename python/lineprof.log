Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: post_api_csrf_token
Total time: 0.170149 [sec]
  Line      Hits         Time  Code
===================================
   147                         @app.route('/api/csrf_token', methods=['POST'])
   148                         def post_api_csrf_token():
   149         1       131544      db = get_db()
   150                         
   151         1            0      sql = 'INSERT INTO `tokens` (`csrf_token`) VALUES'
   152         1            1      sql += ' (SHA2(CONCAT(RAND(), UUID_SHORT()), 256))'
   153                         
   154         1        16651      id = execute(db, sql)
   155                         
   156         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens` WHERE id = %(id)s'
   157         1        21269      token = select_one(db, sql, {'id': id})
   158                         
   159         1          684      return jsonify({'token': token['csrf_token']})

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.131515 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           15      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            3      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1       131475      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.021262 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         1           18      cursor = db.cursor()
    32         1        21231      cursor.execute(sql, params)
    33         1           13      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: execute
Total time: 0.016644 [sec]
  Line      Hits         Time  Code
===================================
    24                         def execute(db, sql, params={}):
    25         1           31      cursor = db.cursor()
    26         1        16612      cursor.execute(sql, params)
    27         1            1      return cursor.lastrowid

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: post_api_csrf_token
Total time: 0.156239 [sec]
  Line      Hits         Time  Code
===================================
   147                         @app.route('/api/csrf_token', methods=['POST'])
   148                         def post_api_csrf_token():
   149         1       100980      db = get_db()
   150                         
   151         1            0      sql = 'INSERT INTO `tokens` (`csrf_token`) VALUES'
   152         1            1      sql += ' (SHA2(CONCAT(RAND(), UUID_SHORT()), 256))'
   153                         
   154         1        11538      id = execute(db, sql)
   155                         
   156         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens` WHERE id = %(id)s'
   157         1        43080      token = select_one(db, sql, {'id': id})
   158                         
   159         1          640      return jsonify({'token': token['csrf_token']})

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.100965 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           14      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            7      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1       100924      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.043072 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         1           17      cursor = db.cursor()
    32         1        43043      cursor.execute(sql, params)
    33         1           12      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: execute
Total time: 0.011532 [sec]
  Line      Hits         Time  Code
===================================
    24                         def execute(db, sql, params={}):
    25         1           26      cursor = db.cursor()
    26         1        11506      cursor.execute(sql, params)
    27         1            0      return cursor.lastrowid

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_rooms_id
Total time: 12.1646 [sec]
  Line      Hits         Time  Code
===================================
   241                         @app.route('/api/rooms/<id>')
   242                         def get_api_rooms_id(id):
   243         1       169153      db = get_db()
   244         1         6530      room = get_room(db, id)
   245                         
   246         1            1      if room is None:
   247                                 res = jsonify({'error': 'この部屋は存在しません。'})
   248                                 res.status_code = 500
   249                                 return res
   250                         
   251         1        23872      strokes = get_strokes(db, room['id'], 0)
   252         1      1678726      points_all = get_strokes_with_points(db, room['id'], 0)
   253         1            0      points = {}
   254       949          440      for point in points_all:
   255       948          435          stroke_id = point['stroke_id']
   256       948          576          points.setdefault(stroke_id, [])
   257       948          580          points[stroke_id].append(point)
   258                         
   259         9            8      for i, stroke in enumerate(strokes):
   260         8            7          strokes[i]['points'] = points[stroke['id']]
   261                         
   262         1            1      room['strokes'] = strokes
   263         1        37007      room['watcher_count'] = get_watcher_count(db, room['id'])
   264                         
   265         1     10247295      return jsonify({'room': type_cast_room_data(room)})

File: /home/isucon/webapp/python/app.py
Name: select_all
Total time: 1.70256 [sec]
  Line      Hits         Time  Code
===================================
    36                         def select_all(db, sql, params={}):
    37         2           42      cursor = db.cursor()
    38         2      1702497      cursor.execute(sql, params)
    39         2           24      return cursor.fetchall()

File: /home/isucon/webapp/python/app.py
Name: get_strokes_with_points
Total time: 1.67872 [sec]
  Line      Hits         Time  Code
===================================
   227                         def get_strokes_with_points(db, room_id, greater_than_id):
   228                             sql = '''
   229                             SELECT
   230                                 `points`.`id` AS `id`,
   231                                 `points`.`stroke_id` AS `stroke_id`,
   232                                 `points`.`x` AS `x`,
   233                                 `points`.`y` AS `y`
   234                             FROM `strokes`
   235                             JOIN `points` ON `points`.`stroke_id` = `strokes`.`id`
   236                             WHERE `strokes`.`room_id` = %(room_id)s AND `strokes`.`id` > %(greater_than_id)s
   237         1            1      ORDER BY `points`.`id` ASC'''
   238         1      1678717      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: type_cast_room_data
Total time: 0.898857 [sec]
  Line      Hits         Time  Code
===================================
    85                         def type_cast_room_data(data):
    86         1            1      return {
    87         1            1          'id': int(data['id']),
    88         1            1          'name': data['name'],
    89         1            0          'canvas_width': int(data['canvas_width']),
    90         1            1          'canvas_height': int(data['canvas_height']),
    91         1           37          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    92         1       898814          'strokes': list(map(type_cast_stroke_data, data['strokes'])) if 'strokes' in data and data['strokes'] else [],
    93         1            2          'stroke_count': int(data.get('stroke_count', 0)),
    94         1            0          'watcher_count': int(data.get('watcher_count', 0)),
    95                             }

File: /home/isucon/webapp/python/app.py
Name: type_cast_stroke_data
Total time: 0.898732 [sec]
  Line      Hits         Time  Code
===================================
    71                         def type_cast_stroke_data(data):
    72         8           10      return {
    73         8           12          'id': int(data['id']),
    74         8            7          'room_id': int(data['room_id']),
    75         8            6          'width': int(data['width']),
    76         8            8          'red': int(data['red']),
    77         8            4          'green': int(data['green']),
    78         8            3          'blue': int(data['blue']),
    79         8          258          'alpha': float(data['alpha']),
    80         8       898216          'points': list(map(type_cast_point_data, data['points'])) if 'points' in data and data['points'] else [],
    81         8          208          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    82                             }

File: /home/isucon/webapp/python/app.py
Name: type_cast_point_data
Total time: 0.88993 [sec]
  Line      Hits         Time  Code
===================================
    46                         def type_cast_point_data(data):
    47       948         5607      return {
    48       948          639          'id': int(data['id']),
    49       948          568          'stroke_id': int(data['stroke_id']),
    50       948       383130          'x': float(data['x']),
    51       948       499986          'y': float(data['y']),
    52                             }

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.169136 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            7      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1       169098      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.043502 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           53      cursor = db.cursor()
    32         2        43425      cursor.execute(sql, params)
    33         2           24      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: get_watcher_count
Total time: 0.036998 [sec]
  Line      Hits         Time  Code
===================================
   127                         def get_watcher_count(db, room_id):
   128         1            1      sql = 'SELECT COUNT(*) AS `watcher_count` FROM `room_watchers`'
   129         1            2      sql += ' WHERE `room_id` = %(room_id)s AND `updated_at` > CURRENT_TIMESTAMP(6) - INTERVAL 3 SECOND'
   130         1        36994      result = select_one(db, sql, {'room_id': room_id})
   131         1            1      return result['watcher_count']

File: /home/isucon/webapp/python/app.py
Name: get_strokes
Total time: 0.023862 [sec]
  Line      Hits         Time  Code
===================================
   116                         def get_strokes(db, room_id, greater_than_id):
   117         1            1      sql = 'SELECT `id`, `room_id`, `width`, `red`, `green`, `blue`, `alpha`, `created_at` FROM `strokes`'
   118         1            1      sql += ' WHERE `room_id` = %(room_id)s AND `id` > %(greater_than_id)s ORDER BY `id` ASC'
   119         1        23860      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.006523 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1         6523      return select_one(db, sql, {'room_id': room_id})

File: /home/isucon/webapp/python/app.py
Name: to_RFC3339_micro
Total time: 0.000183 [sec]
  Line      Hits         Time  Code
===================================
    66                         def to_RFC3339_micro(date):
    67                             # RFC3339では+00:00のときはZにするという仕様だが、pythonは準拠していないため
    68         9          183      return date.replace(tzinfo=UTC()).isoformat().replace('+00:00', 'Z')

File: /home/isucon/webapp/python/app.py
Name: utcoffset
Total time: 3.4e-05 [sec]
  Line      Hits         Time  Code
===================================
    56                             def utcoffset(self, dt):
    57         9           34          return timedelta(0)

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_rooms
Total time: 3.22272 [sec]
  Line      Hits         Time  Code
===================================
   162                         @app.route('/api/rooms', methods=['GET'])
   163                         def get_api_rooms():
   164                         
   165         1        44079      db = get_db()
   166                         
   167         1            0      sql = 'SELECT `room_id`, MAX(`id`) AS `max_id` FROM `strokes`'
   168         1            1      sql += ' GROUP BY `room_id` ORDER BY `max_id` DESC LIMIT 100'
   169         1         8508      results = select_all(db, sql)
   170                         
   171         1            0      rooms = []
   172       101           63      for result in results:
   173       100      1290975          room = get_room(db, result['room_id'])
   174       100      1028214          strokes = get_strokes(db, room['id'], 0)
   175       100          135          room['stroke_count'] = len(strokes)
   176       100          104          rooms.append(room)
   177                         
   178         1       850637      return jsonify({'rooms': list(map(type_cast_room_data, rooms))})

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 1.29059 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123       100           43      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124       100      1290544      return select_one(db, sql, {'room_id': room_id})

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 1.28733 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31       100        14212      cursor = db.cursor()
    32       100      1271761      cursor.execute(sql, params)
    33       100         1356      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: select_all
Total time: 1.03389 [sec]
  Line      Hits         Time  Code
===================================
    36                         def select_all(db, sql, params={}):
    37       101         2271      cursor = db.cursor()
    38       101      1030659      cursor.execute(sql, params)
    39       101          963      return cursor.fetchall()

File: /home/isucon/webapp/python/app.py
Name: get_strokes
Total time: 1.02613 [sec]
  Line      Hits         Time  Code
===================================
   116                         def get_strokes(db, room_id, greater_than_id):
   117       100           37      sql = 'SELECT `id`, `room_id`, `width`, `red`, `green`, `blue`, `alpha`, `created_at` FROM `strokes`'
   118       100           89      sql += ' WHERE `room_id` = %(room_id)s AND `id` > %(greater_than_id)s ORDER BY `id` ASC'
   119       100      1026004      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.044065 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           12      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            7      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1        44027      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: type_cast_room_data
Total time: 0.001254 [sec]
  Line      Hits         Time  Code
===================================
    85                         def type_cast_room_data(data):
    86       100           58      return {
    87       100           65          'id': int(data['id']),
    88       100           41          'name': data['name'],
    89       100           52          'canvas_width': int(data['canvas_width']),
    90       100           69          'canvas_height': int(data['canvas_height']),
    91       100          761          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    92       100           63          'strokes': list(map(type_cast_stroke_data, data['strokes'])) if 'strokes' in data and data['strokes'] else [],
    93       100           89          'stroke_count': int(data.get('stroke_count', 0)),
    94       100           56          'watcher_count': int(data.get('watcher_count', 0)),
    95                             }

File: /home/isucon/webapp/python/app.py
Name: to_RFC3339_micro
Total time: 0.000559 [sec]
  Line      Hits         Time  Code
===================================
    66                         def to_RFC3339_micro(date):
    67                             # RFC3339では+00:00のときはZにするという仕様だが、pythonは準拠していないため
    68       100          559      return date.replace(tzinfo=UTC()).isoformat().replace('+00:00', 'Z')

File: /home/isucon/webapp/python/app.py
Name: utcoffset
Total time: 7.7e-05 [sec]
  Line      Hits         Time  Code
===================================
    56                             def utcoffset(self, dt):
    57       100           77          return timedelta(0)

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: post_api_csrf_token
Total time: 0.047843 [sec]
  Line      Hits         Time  Code
===================================
   147                         @app.route('/api/csrf_token', methods=['POST'])
   148                         def post_api_csrf_token():
   149         1        38904      db = get_db()
   150                         
   151         1            0      sql = 'INSERT INTO `tokens` (`csrf_token`) VALUES'
   152         1            1      sql += ' (SHA2(CONCAT(RAND(), UUID_SHORT()), 256))'
   153                         
   154         1         7966      id = execute(db, sql)
   155                         
   156         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens` WHERE id = %(id)s'
   157         1          434      token = select_one(db, sql, {'id': id})
   158                         
   159         1          537      return jsonify({'token': token['csrf_token']})

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.038888 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           25      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1        38839      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: execute
Total time: 0.007961 [sec]
  Line      Hits         Time  Code
===================================
    24                         def execute(db, sql, params={}):
    25         1           24      cursor = db.cursor()
    26         1         7936      cursor.execute(sql, params)
    27         1            1      return cursor.lastrowid

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000421 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         1           20      cursor = db.cursor()
    32         1          387      cursor.execute(sql, params)
    33         1           14      return cursor.fetchone()

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_rooms_id
Total time: 1.86383 [sec]
  Line      Hits         Time  Code
===================================
   241                         @app.route('/api/rooms/<id>')
   242                         def get_api_rooms_id(id):
   243         1        69068      db = get_db()
   244         1         4448      room = get_room(db, id)
   245                         
   246         1            1      if room is None:
   247                                 res = jsonify({'error': 'この部屋は存在しません。'})
   248                                 res.status_code = 500
   249                                 return res
   250                         
   251         1         1364      strokes = get_strokes(db, room['id'], 0)
   252         1       188568      points_all = get_strokes_with_points(db, room['id'], 0)
   253         1            1      points = {}
   254       161           76      for point in points_all:
   255       160           85          stroke_id = point['stroke_id']
   256       160          100          points.setdefault(stroke_id, [])
   257       160           99          points[stroke_id].append(point)
   258                         
   259         4            5      for i, stroke in enumerate(strokes):
   260         3            3          strokes[i]['points'] = points[stroke['id']]
   261                         
   262         1            1      room['strokes'] = strokes
   263         1          419      room['watcher_count'] = get_watcher_count(db, room['id'])
   264                         
   265         1      1599595      return jsonify({'room': type_cast_room_data(room)})

File: /home/isucon/webapp/python/app.py
Name: select_all
Total time: 0.189905 [sec]
  Line      Hits         Time  Code
===================================
    36                         def select_all(db, sql, params={}):
    37         2           38      cursor = db.cursor()
    38         2       189844      cursor.execute(sql, params)
    39         2           23      return cursor.fetchall()

File: /home/isucon/webapp/python/app.py
Name: get_strokes_with_points
Total time: 0.188561 [sec]
  Line      Hits         Time  Code
===================================
   227                         def get_strokes_with_points(db, room_id, greater_than_id):
   228                             sql = '''
   229                             SELECT
   230                                 `points`.`id` AS `id`,
   231                                 `points`.`stroke_id` AS `stroke_id`,
   232                                 `points`.`x` AS `x`,
   233                                 `points`.`y` AS `y`
   234                             FROM `strokes`
   235                             JOIN `points` ON `points`.`stroke_id` = `strokes`.`id`
   236                             WHERE `strokes`.`room_id` = %(room_id)s AND `strokes`.`id` > %(greater_than_id)s
   237         1            0      ORDER BY `points`.`id` ASC'''
   238         1       188561      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: type_cast_room_data
Total time: 0.077048 [sec]
  Line      Hits         Time  Code
===================================
    85                         def type_cast_room_data(data):
    86         1            1      return {
    87         1            2          'id': int(data['id']),
    88         1            1          'name': data['name'],
    89         1            1          'canvas_width': int(data['canvas_width']),
    90         1            1          'canvas_height': int(data['canvas_height']),
    91         1           27          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    92         1        77011          'strokes': list(map(type_cast_stroke_data, data['strokes'])) if 'strokes' in data and data['strokes'] else [],
    93         1            3          'stroke_count': int(data.get('stroke_count', 0)),
    94         1            1          'watcher_count': int(data.get('watcher_count', 0)),
    95                             }

File: /home/isucon/webapp/python/app.py
Name: type_cast_stroke_data
Total time: 0.076979 [sec]
  Line      Hits         Time  Code
===================================
    71                         def type_cast_stroke_data(data):
    72         3            3      return {
    73         3            3          'id': int(data['id']),
    74         3            3          'room_id': int(data['room_id']),
    75         3            2          'width': int(data['width']),
    76         3            1          'red': int(data['red']),
    77         3            0          'green': int(data['green']),
    78         3            3          'blue': int(data['blue']),
    79         3           96          'alpha': float(data['alpha']),
    80         3        76811        nt != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           93      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.051009 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           11      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            5      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1        50976      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.005178 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           42      cursor = db.cursor()
    32         2         5115      cursor.execute(sql, params)
    33         2           21      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.003977 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1         3963      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1           13      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.001227 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1         1226      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_rooms
Total time: 4.01979 [sec]
  Line      Hits         Time  Code
===================================
   162                         @app.route('/api/rooms', methods=['GET'])
   163                         def get_api_rooms():
   164                         
   165         1         2374      db = get_db()
   166                         
   167         1            0      sql = 'SELECT `room_id`, MAX(`id`) AS `max_id` FROM `strokes`'
   168         1            1      sql += ' GROUP BY `room_id` ORDER BY `max_id` DESC LIMIT 100'
   169         1         5783      results = select_all(db, sql)
   170                         
   171         1            0      rooms = []
   172       101           64      for result in results:
   173       100      1344233          room = get_room(db, result['room_id'])
   174       100      1188461          strokes = get_strokes(db, room['id'], 0)
   175       100          131          room['stroke_count'] = len(strokes)
   176       100           96          rooms.append(room)
   177                         
   178         1      1478648      return jsonify({'rooms': list(map(type_cast_room_data, rooms))})

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 1.34384 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123       100           39      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124       100      1343802      return select_one(db, sql, {'room_id': room_id})

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 1.34318 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31       100         2186      cursor = db.cursor()
    32       100      1340055      cursor.execute(sql, params)
    33       100          942      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: get_strokes
Total time: 1.18726 [sec]
  Line      Hits         Time  Code
===================================
   116                         def get_strokes(db, room_id, greater_than_id):
   117       100           31      sql = 'SELECT `id`, `room_id`, `width`, `red`, `green`, `blue`, `alpha`, `created_at` FROM `strokes`'
   118       100           69      sql += ' WHERE `room_id` = %(room_id)s AND `id` > %(greater_than_id)s ORDER BY `id` ASC'
   119       100      1187162      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: select_all
Total time: 1.17687 [sec]
  Line      Hits         Time  Code
===================================
    36                         def select_all(db, sql, params={}):
    37       101        13446      cursor = db.cursor()
    38       101      1162493      cursor.execute(sql, params)
    39       101          936      return cursor.fetchall()

File: /home/isucon/webapp/python/app.py
Name: type_cast_room_data
Total time: 0.027358 [sec]
  Line      Hits         Time  Code
===================================
    85                         def type_cast_room_data(data):
    86       100           47      return {
    87       100           58          'id': int(data['id']),
    88       100          110          'name': data['name'],
    89       100           63          'canvas_width': int(data['canvas_width']),
    90       100           74          'canvas_height': int(data['canvas_height']),
    91       100        26840          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    92       100           38          'strokes': list(map(type_cast_stroke_data, data['strokes'])) if 'strokes' in data and data['strokes'] else [],
    93       100           56          'stroke_count': int(data.get('stroke_count', 0)),
    94       100           72          'watcher_count': int(data.get('watcher_count', 0)),
    95                             }

File: /home/isucon/webapp/python/app.py
Name: to_RFC3339_micro
Total time: 0.026686 [sec]
  Line      Hits         Time  Code
===================================
    66                         def to_RFC3339_micro(date):
    67                             # RFC3339では+00:00のときはZにするという仕様だが、pythonは準拠していないため
    68       100        26686      return date.replace(tzinfo=UTC()).isoformat().replace('+00:00', 'Z')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.00236 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         2323      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: utcoffset
Total time: 8e-05 [sec]
  Line      Hits         Time  Code
===================================
    56                             def utcoffset(self, dt):
    57       100           80          return timedelta(0)

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: post_api_csrf_token
Total time: 0.044527 [sec]
  Line      Hits         Time  Code
===================================
   147                         @app.route('/api/csrf_token', methods=['POST'])
   148                         def post_api_csrf_token():
   149         1        35497      db = get_db()
   150                         
   151         1            0      sql = 'INSERT INTO `tokens` (`csrf_token`) VALUES'
   152         1            1      sql += ' (SHA2(CONCAT(RAND(), UUID_SHORT()), 256))'
   153                         
   154         1         1200      id = execute(db, sql)
   155                         
   156         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens` WHERE id = %(id)s'
   157         1         7307      token = select_one(db, sql, {'id': id})
   158                         
   159         1          521      return jsonify({'token': token['csrf_token']})

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.035483 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           14      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1        35447      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.007299 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         1           21      cursor = db.cursor()
    32         1         7268      cursor.execute(sql, params)
    33         1           10      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: execute
Total time: 0.001194 [sec]
  Line      Hits         Time  Code
===================================
    24                         def execute(db, sql, params={}):
    25         1           24      cursor = db.cursor()
    26         1         1169      cursor.execute(sql, params)
    27         1            1      return cursor.lastrowid

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_rooms_id
Total time: 1.55604 [sec]
  Line      Hits         Time  Code
===================================
   241                         @app.route('/api/rooms/<id>')
   242                         def get_api_rooms_id(id):
   243         1       108656      db = get_db()
   244         1          848      room = get_room(db, id)
   245                         
   246         1            0      if room is None:
   247                                 res = jsonify({'error': 'この部屋は存在しません。'})
   248                                 res.status_code = 500
   249                                 return res
   250                         
   251         1         8332      strokes = get_strokes(db, room['id'], 0)
   252         1       133881      points_all = get_strokes_with_points(db, room['id'], 0)
   253         1            0      points = {}
   254        81           35      for point in points_all:
   255        80           58          stroke_id = point['stroke_id']
   256        80           46          points.setdefault(stroke_id, [])
   257        80           31          points[stroke_id].append(point)
   258                         
   259         3            5      for i, stroke in enumerate(strokes):
   260         2            1          strokes[i]['points'] = points[stroke['id']]
   261                         
   262         1            1      room['strokes'] = strokes
   263         1         8437      room['watcher_count'] = get_watcher_count(db, room['id'])
   264                         
   265         1      1295708      return jsonify({'room': type_cast_room_data(room)})

File: /home/isucon/webapp/python/app.py
Name: select_all
Total time: 0.142187 [sec]
  Line      Hits         Time  Code
===================================
    36                         def select_all(db, sql, params={}):
    37         2           36      cursor = db.cursor()
    38         2       142132      cursor.execute(sql, params)
    39         2           19      return cursor.fetchall()

File: /home/isucon/webapp/python/app.py
Name: get_strokes_with_points
Total time: 0.133877 [sec]
  Line      Hits         Time  Code
===================================
   227                         def get_strokes_with_points(db, room_id, greater_than_id):
   228                             sql = '''
   229                             SELECT
   230                                 `points`.`id` AS `id`,
   231                                 `points`.`stroke_id` AS `stroke_id`,
   232                                 `points`.`x` AS `x`,
   233                                 `points`.`y` AS `y`
   234                             FROM `strokes`
   235                             JOIN `points` ON `points`.`stroke_id` = `strokes`.`id`
   236                             WHERE `strokes`.`room_id` = %(room_id)s AND `strokes`.`id` > %(greater_than_id)s
   237         1            1      ORDER BY `points`.`id` ASC'''
   238         1       133876      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.108642 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           11      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1       108610      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: type_cast_room_data
Total time: 0.081068 [sec]
  Line      Hits         Time  Code
===================================
    85                         def type_cast_room_data(data):
    86         1            1      return {
    87         1            1          'id': int(data['id']),
    88         1            1          'name': data['name'],
    89         1            1          'canvas_width': int(data['canvas_width']),
    90         1            1          'canvas_height': int(data['canvas_height']),
    91         1           24          'created_at': to_RFC3339_micro(data['created_at']) if data['created_atokens` (`csrf_token`) VALUES'
   152         1            1      sql += ' (SHA2(CONCAT(RAND(), UUID_SHORT()), 256))'
   153                         
   154         1          517      id = execute(db, sql)
   155                         
   156         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens` WHERE id = %(id)s'
   157         1         1271      token = select_one(db, sql, {'id': id})
   158                         
   159         1          536      return jsonify({'token': token['csrf_token']})

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.052285 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           12      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1        52250      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.001264 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         1           20      cursor = db.cursor()
    32         1         1229      cursor.execute(sql, params)
    33         1           15      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: execute
Total time: 0.000511 [sec]
  Line      Hits         Time  Code
===================================
    24                         def execute(db, sql, params={}):
    25         1           24      cursor = db.cursor()
    26         1          487      cursor.execute(sql, params)
    27         1            0      return cursor.lastrowid

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_rooms_id
Total time: 1.28835 [sec]
  Line      Hits         Time  Code
===================================
   241                         @app.route('/api/rooms/<id>')
   242                         def get_api_rooms_id(id):
   243         1        58384      db = get_db()
   244         1         7983      room = get_room(db, id)
   245                         
   246         1            1      if room is None:
   247                                 res = jsonify({'error': 'この部屋は存在しません。'})
   248                                 res.status_code = 500
   249                                 return res
   250                         
   251         1         4164      strokes = get_strokes(db, room['id'], 0)
   252         1        90770      points_all = get_strokes_with_points(db, room['id'], 0)
   253         1            0      points = {}
   254        81           31      for point in points_all:
   255        80           31          stroke_id = point['stroke_id']
   256        80           45          points.setdefault(stroke_id, [])
   257        80           45          points[stroke_id].append(point)
   258                         
   259         3            2      for i, stroke in enumerate(strokes):
   260         2            2          strokes[i]['points'] = points[stroke['id']]
   261                         
   262         1            1      room['strokes'] = strokes
   263         1        48606      room['watcher_count'] = get_watcher_count(db, room['id'])
   264                         
   265         1      1078284      return jsonify({'room': type_cast_room_data(room)})

File: /home/isucon/webapp/python/app.py
Name: select_all
Total time: 0.094894 [sec]
  Lineisucon/webapp/python/app.py
Name: to_RFC3339_micro
Total time: 4.9e-05 [sec]
  Line      Hits         Time  Code
===================================
    66                         def to_RFC3339_micro(date):
    67                             # RFC3339では+00:00のときはZにするという仕様だが、pythonは準拠していないため
    68         3           49      return date.replace(tzinfo=UTC()).isoformat().replace('+00:00', 'Z')

File: /home/isucon/webapp/python/app.py
Name: utcoffset
Total time: 9e-06 [sec]
  Line      Hits         Time  Code
===================================
    56                             def utcoffset(self, dt):
    57         3            9          return timedelta(0)

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: post_api_strokes_rooms_id
Total time: 2.626 [sec]
  Line      Hits         Time  Code
===================================
   330                         @app.route('/api/strokes/rooms/<id>', methods=['POST'])
   331                         def post_api_strokes_rooms_id(id):
   332         1        97611      db = get_db()
   333                         
   334         1            1      try:
   335         1         4336          token = check_token(db, request.headers.get('x-csrf-token'))
   336                             except TokenException:
   337                                 res = jsonify({'error': 'トークンエラー。ページを再読み込みしてください。'})
   338                                 res.status_code = 400
   339                                 return res
   340                         
   341         1         8203      room = get_room(db, id)
   342                         
   343         1            1      if room is None:
   344                                 res = jsonify({'error': 'この部屋は存在しません。'})
   345                                 res.status_code = 404
   346                                 return res
   347                         
   348         1         1426      posted_stroke = request.get_json()
   349         1            3      if 'width' not in posted_stroke or 'points' not in posted_stroke:
   350                                 res = jsonify({'error': 'リクエストが正しくありません。'})
   351                                 res.status_code = 400
   352                                 return res
   353                         
   354         1        44779      strokes = get_strokes(db, room['id'], 0)
   355         1            1      if len(strokes) == 0:
   356                                 sql = 'SELECT COUNT(*) AS cnt FROM `room_owners` WHERE `room_id` = %(room_id)s AND `token_id` = %(token_id)s'
   357                                 result = select_one(db, sql, {'room_id': room['id'], 'token_id': token['id']})
   358                                 if result['cnt'] == 0:
   359                                     res = jsonify({'error': '他人の作成した部屋に1画目を描くことはできません'})
   360                                     res.status_code = 400
   361                                     return res
   362                         
   363         1           20      cursor = db.cursor()
   364         1        15831      cursor.connection.autocommit(False)
   365         1            1      try:
   366         1            1          sql = 'INSERT INTO `strokes` (`room_id`, `width`, `red`, `green`, `blue`, `alpha`)'
   367         1            1          sql += ' VALUES(%(room_id)s, %(width)s, %(red)s, %(green)s, %(blue)s, %(alpha)s)'
   368         1            2          cursor.execute(sql, {
   369         1            1              'room_id': room['id'],
   370         1            3              'width': posted_stroke.get('width'),
   371         1            1              'red': posted_stroke.get('red'),
   372         1            2              'green': posted_stroke.get('green'),
   373         1            1              'blue': posted_stroke.get('blue'),
   374         1        10280              'alpha': posted_stroke.get('alpha'),
   375                                 })
   376         1            1          stroke_id = cursor.lastrowid
   377                         
   378         1            1          sql = 'INSERT INTO `points` (`stroke_id`, `x`, `y`) VALUES (%(stroke_id)s, %(x)s, %(y)s)'
   379       123         3621          for point in posted_stroke.get('points'):
   380       122          118              cursor.execute(sql, {
   381       122           90                  'stroke_id': stroke_id,
   382       122          228                  'x': point['x'],
   383       122       766182                  'y': point['y']
   384                                     })
   385         1          338          cursor.connection.commit()
   386         1            4          filename = '../react/img/' + id + '.svg'
   387         1           37          if os.path.exists(filename):
   388                                     os.remove(filename)
   389                             except Exception as e:
   390                                 cursor.connection.rollback()
   391                                 app.logger.error(e)
   392                                 res = jsonify({'error': 'エラーが発生しました。'})
   393                                 res.status_code = 500
   394                                 return res
   395                             else:
   396         1         1974          cursor.connection.autocommit(True)
   397                         
   398         1            1      sql = 'SELECT `id`, `room_id`, `width`, `red`, `green`, `blue`, `alpha`, `created_at` FROM `strokes`'
   399         1            1      sql += ' WHERE `id` = %(stroke_id)s'
   400         1         1576      stroke = select_one(db, sql, {'stroke_id': stroke_id})
   401                         
   402         1       150628      stroke['points'] = get_stroke_points(db, stroke_id)
   403                         
   404         1      1518696      return jsonify({'stroke': type_cast_stroke_data(stroke)})

File: /home/isucon/webapp/python/app.py
Name: select_all
Total time: 0.195363 [sec]
  Line      Hits         Time  Code
===================================
    36                         def select_all(db, sql, params={}):
    37         2           39      cursor = db.cursor()
    38         2       195291      cursor.execute(sql, params)
    39         2           33      return cursor.fetchall()

File: /home/isucon/webapp/python/app.py
Name: get_stroke_points
Total time: 0.150621 [sec]
  Line      Hits         Time  Code
===================================
   111                         def get_stroke_points(db, stroke_id):
   112         1            1      sql = 'SELECT `id`, `stroke_id`, `x`, `y` FROM `points` WHERE `stroke_id` = %(stroke_id)s ORDER BY `id` ASC'
   113         1       150620      return select_all(db, sql, {'stroke_id': stroke_id})

File: /home/isucon/webapp/python/app.py
Name: type_cast_stroke_data
Total time: 0.131434 [sec]
  Line      Hits         Time  Code
===================================
    71                         def type_cast_stroke_data(data):
    72         1            1      return {
    73         1            2          'id': int(data['id']),
    74         1            0          'room_id': int(data['room_id']),
    75         1            1          'width': int(data['width']),
    76         1            0          'red': int(data['red']),
    77         1            1          'green': int(data['green']),
    78         1            0          'blue': int(data['blue']),
    79         1          143          'alpha': float(data['alpha']),
    80         1       131260          'points': list(map(type_cast_point_data, data['points'])) if 'points' in data and data['points'] else [],
    81         1           26          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    82                             }

File: /home/isucon/webapp/python/app.py
Name: type_cast_point_data
Total time: 0.130789 [sec]
  Line      Hits         Time  Code
===================================
    46                         def type_cast_point_data(data):
    47       122           50      return {
    48       122           73          'id': int(data['id']),
    49       122           61          'stroke_id': int(data['stroke_id']),
    50       122       119516          'x': float(data['x']),
    51       122        11089          'y': float(data['y']),
    52                             }

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.097531 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            7      user = os.environ.get('MYSQL_USER', 'root')
    16         1            9      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1        97490      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: get_strokes
Total time: 0.044774 [sec]
  Line      Hits         Time  Code
===================================
   116                         def get_strokes(db, room_id, greater_than_id):
   117         1            1      sql = 'SELECT `id`, `room_id`, `width`, `red`, `green`, `blue`, `alpha`, `created_at` FROM `strokes`'
   118         1            1      sql += ' WHERE `room_id` = %(room_id)s AND `id` > %(greater_than_id)s ORDER BY `id` ASC'
   119         1        44772      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.013993 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         3           66      cursor = db.cursor()
    32         3        13896      cursor.execute(sql, params)
    33         3           31      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.008199 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1         8198      return select_one(db, sql, {'room_id': room_id})

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.00424 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1         4239      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: to_RFC3339_micro
Total time: 2.2e-05 [sec]
  Line      Hits         Time  Code
===================================
    66                         def to_RFC3339_micro(date):
    67                             # RFC3339では+00:00のときはZにするという仕様だが、pythonは準拠していないため
    68         1           22      return date.replace(tzinfo=UTC()).isoformat().replace('+00:00', 'Z')

File: /home/isucon/webapp/python/app.py
Name: utcoffset
Total time: 3e-06 [sec]
  Line      Hits         Time  Code
===================================
    56                             def utcoffset(self, dt):
    57         1            3          return timedelta(0)

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_rooms_id
Total time: 4.90175 [sec]
  Line      Hits         Time  Code
===================================
   241                         @app.route('/api/rooms/<id>')
   242                         def get_api_rooms_id(id):
   243         1        52604      db = get_db()
   244         1         2874      room = get_room(db, id)
   245                         
   246         1            0      if room is None:
   247                                 res = jsonify({'error': 'この部屋は存在しません。'})
   248                                 res.status_code = 500
   249                                 return res
   250                         
   251         1         3618      strokes = get_strokes(db, room['id'], 0)
   252         1       360566      points_all = get_strokes_with_points(db, room['id'], 0)
   253         1            0      points = {}
   254       283          140      for point in points_all:
   255       282          132          stroke_id = point['stroke_id']
   256       282          204          points.setdefault(stroke_id, [])
   257       282          182          points[stroke_id].append(point)
   258                         
   259         5            3      for i, stroke in enumerate(strokes):
   260         4            4          strokes[i]['points'] = points[stroke['id']]
   261                         
   262         1            1      room['strokes'] = strokes
   263         1       118626      room['watcher_count'] = get_watcher_count(db, room['id'])
   264                         
   265         1      4362791      return jsonify({'room': type_cast_room_data(room)})

File: /home/isucon/webapp/python/app.py
Name: select_all
Total time: 0.364156 [sec]
  Line      Hits         Time  Code
===================================
    36                         def select_all(db, sql, params={}):
    37         2           40      cursor = db.cursor()
    38         2       364096      cursor.execute(sql, params)
    39         2           20      return cursor.fetchall()

File: /home/isucon/webapp/python/app.py
Name: get_strokes_with_points
Total time: 0.36056 [sec]
  Line      Hits         Time  Code
===================================
   227                         def get_strokes_with_points(db, room_id, greater_than_id):
   228                             sql = '''
   229                             SELECT
   230                                 `points`.`id` AS `id`,
   231                                 `points`.`stroke_id` AS `stroke_id`,
   232                                 `points`.`x` AS `x`,
   233                                 `points`.`y` AS `y`
   234                             FROM `strokes`
   235                             JOIN `points` ON `points`.`stroke_id` = `strokes`.`id`
   236                             WHERE `strokes`.`room_id` = %(room_id)s AND `strokes`.`id` > %(greater_than_id)s
   237         1            0      ORDER BY `points`.`id` ASC'''
   238         1       360560      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: type_cast_room_data
Total time: 0.231079 [sec]
  Line      Hits         Time  Code
===================================
    85                         def type_cast_room_data(data):
    86         1            1      return {
    87         1            2          'id': int(data['id']),
    88         1            1          'name': data['name'],
    89         1            1          'canvas_width': int(data['canvas_width']),
    90         1            1          'canvas_height': int(data['canvas_height']),
    91         1           26          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    92         1       231044      , `room_id`, `width`, `red`, `green`, `blue`, `alpha`, `created_at` FROM `strokes`'
   118       100           75      sql += ' WHERE `room_id` = %(room_id)s AND `id` > %(greater_than_id)s ORDER BY `id` ASC'
   119       100      1194019      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 1.17641 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123       100           27      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124       100      1176379      return select_one(db, sql, {'room_id': room_id})

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 1.1758 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31       100        19280      cursor = db.cursor()
    32       100      1148264      cursor.execute(sql, params)
    33       100         8253      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.062656 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           20      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1           10      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1        62610      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: type_cast_room_data
Total time: 0.001213 [sec]
  Line      Hits         Time  Code
===================================
    85                         def type_cast_room_data(data):
    86       100           60      return {
    87       100           65          'id': int(data['id']),
    88       100           40          'name': data['name'],
    89       100           47          'canvas_width': int(data['canvas_width']),
    90       100           88          'canvas_height': int(data['canvas_height']),
    91       100          726          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    92       100           55          'strokes': list(map(type_cast_stroke_data, data['strokes'])) if 'strokes' in data and data['strokes'] else [],
    93       100           65          'stroke_count': int(data.get('stroke_count', 0)),
    94       100           67          'watcher_count': int(data.get('watcher_count', 0)),
    95                             }

File: /home/isucon/webapp/python/app.py
Name: to_RFC3339_micro
Total time: 0.000563 [sec]
  Line      Hits         Time  Code
===================================
    66                         def to_RFC3339_micro(date):
    67                             # RFC3339では+00:00のときはZにするという仕様だが、pythonは準拠していないため
    68       100          563      return date.replace(tzinfo=UTC()).isoformat().replace('+00:00', 'Z')

File: /home/isucon/webapp/python/app.py
Name: utcoffset
Total time: 8.7e-05 [sec]
  Line      Hits         Time  Code
===================================
    56                             def utcoffset(self, dt):
    57       100           87          return timedelta(0)

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_rooms_id
Total time: 5.37663 [sec]
  Line      Hits         Time  Code
===================================
   241                         @app.route('/api/rooms/<id>')
   242                         def get_api_rooms_id(id):
   243         1        82853      db = get_db()
   244         1          470      room = get_room(db, id)
   245                         
   246         1            0      if room is None:
   247                                 res = jsonify({'error': 'この部屋は存在しません。'})
   248                                 res.status_code = 500
   249                                 return res
   250                         
   251         1        14760      strokes = get_strokes(db, room['id'], 0)
   252         1       488311      points_all = get_strokes_with_points(db, room['id'], 0)
   253         1            0      points = {}
   254       283          134      for point in points_all:
   255       282          127          stroke_id = point['stroke_id']
   256       282          177          points.setdefault(stroke_id, [])
   257       282          161          points[stroke_id].append(point)
   258                         
   259         5            5      for i, stroke in enumerate(strokes):
   260         4            4          strokes[i]['points'] = points[stroke['id']]
   261                         
   262         1            1      room['strokes'] = strokes
   263         1       129713      room['watcher_count'] = get_watcher_count(db, room['id'])
   264                         
   265         1      4659914      return jsonify({'room': type_cast_room_data(room)})

File: /home/isucon/webapp/python/app.py
Name: select_all
Total time: 0.503043 [sec]
  Line      Hits         Time  Code
===================================
    36                         def select_all(db, sql, params={}):
    37         2           39      cursor = db.cursor()
    38         2       502982      cursor.execute(sql, params)
    39         2           22      return cursor.fetchall()

File: /home/isucon/webapp/python/app.py
Name: get_strokes_with_points
Total time: 0.488306 [sec]
  Line      Hits         Time  Code
===================================
   227                         def get_strokes_with_points(db, room_id, greater_than_id):
   228                             sql = '''
   229                             SELECT
   230                                 `points`.`id` AS `id`,
   231                                 `points`.`stroke_id` AS `stroke_id`,
   232                                 `points`.`x` AS `x`,
   233                                 `points`.`y` AS `y`
   234                             FROM `strokes`
   235                             JOIN `points` ON `points`.`stroke_id` = `strokes`.`id`
   236                             WHERE `strokes`.`room_id` = %(room_id)s AND `strokes`.`id` > %(greater_than_id)s
   237         1            1      ORDER BY `points`.`id` ASC'''
   238         1       488305      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: type_cast_room_data
Total time: 0.403781 [sec]
  Line      Hits         Time  Code
===================================
    85                         def type_cast_room_data(data):
    86         1            1      return {
    87         1            2          'id': int(data['id']),
    88         1            1          'name': data['name'],
    89         1            0          'canvas_width': int(data['canvas_width']),
    90         1            1          'canvas_height': int(data['canvas_height']),
    91         1           24          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    92         1       403750          'strokes': list(map(type_cast_stroke_data, data['strokes'])) if 'strokes' in data and data['strokes'] else [],
    93         1            2          'stroke_count': int(data.get('stroke_count', 0)),
    94         1            0          'watcher_count': int(data.get('watcher_count', 0)),
    95                             }

File: /home/isucon/webapp/python/app.py
Name: type_cast_stroke_data
To====================
    30                         def select_one(db, sql, params={}):
    31         1           18      cursor = db.cursor()
    32         1         1041      cursor.execute(sql, params)
    33         1           11      return cursor.fetchone()

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_rooms_id
Total time: 6.28084 [sec]
  Line      Hits         Time  Code
===================================
   241                         @app.route('/api/rooms/<id>')
   242                         def get_api_rooms_id(id):
   243         1        35560      db = get_db()
   244         1         8035      room = get_room(db, id)
   245                         
   246         1            0      if room is None:
   247                                 res = jsonify({'error': 'この部屋は存在しません。'})
   248                                 res.status_code = 500
   249                                 return res
   250                         
   251         1        12234      strokes = get_strokes(db, room['id'], 0)
   252         1       581646      points_all = get_strokes_with_points(db, room['id'], 0)
   253         1            0      points = {}
   254       345          148      for point in points_all:
   255       344          166          stroke_id = point['stroke_id']
   256       344          212          points.setdefault(stroke_id, [])
   257       344          202          points[stroke_id].append(point)
   258                         
   259         6            6      for i, stroke in enumerate(strokes):
   260         5            7          strokes[i]['points'] = points[stroke['id']]
   261                         
   262         1            1      room['strokes'] = strokes
   263         1        12268      room['watcher_count'] = get_watcher_count(db, room['id'])
   264                         
   265         1      5630355      return jsonify({'room': type_cast_room_data(room)})

File: /home/isucon/webapp/python/app.py
Name: select_all
Total time: 0.593853 [sec]
  Line      Hits         Time  Code
===================================
    36                         def select_all(db, sql, params={}):
    37         2           37      cursor = db.cursor()
    38         2       593795      cursor.execute(sql, params)
    39         2           21      return cursor.fetchall()

File: /home/isucon/webapp/python/app.py
Name: get_strokes_with_points
Total time: 0.581638 [sec]
  Line      Hits         Time  Code
===================================
   227                         def get_strokes_with_points(db, room_id, greater_than_id):
   228                             sql = '''
   229                             SELECT
   230                                 `points`.`id` AS `id`,
   231                                 `points`.`stroke_id` AS `stroke_id`,
   232                                 `points`.`x` AS `x`,
   233                                 `points`.`y` AS `y`
   234                             FROM `strokes`
   235                             JOIN `points` ON `points`.`stroke_id` = `strokes`.`id`
   236                             WHERE `strokes`.`room_id` = %(room_id)s AND `strokes`.`id` > %(greater_than_id)s
   237         1            0      ORDER BY `points`.`id` ASC'''
   238         1       581638      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: type_cast_room_data
Total time: 0.381794 [sec]
  Line      Hits         Time  Code
===================================
    85                         def type_cast_room_data(data):
    86         1            1      return {
    87         1            1          'id': int(data['id']),
    88         1            0          'name': data['name'],
    89         1            1          'canvas_width': int(data['canvas_width']),
    90         1            0          'canvas_height': int(data['canvas_height']),
    91         1           22          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    92         1       381766          'strokes': list(map(type_cast_stroke_data, data['strokes'])) if 'strokes' in data and data['strokes'] else [],
    93         1            2          'stroke_count': int(data.get('stroke_count', 0)),
    94         1            1          'watcher_count': int(data.get('watcher_count', 0)),
    95                             }

File: /home/isucon/webapp/python/app.py
Name: type_cast_stroke_data
Total time: 0.381716 [sec]
  Line      Hits         Time  Code
===================================
    71                         def type_cast_stroke_data(data):
    72         5            6      return {
    73         5            5          'id': int(data['id']),
    74         5            5          'room_id': int(data['room_id']),
    75         5            4          'width': int(data['width']),
    76         5            3          'red': int(data['red']),
    77         5            3          'green': int(data['green']),
    78         5            4          'blue': int(data['blue']),
    79         5          159          'alpha': float(data['alpha']),
    80         5       381408          'points': list(map(type_cast_point_data, data['points'])) if 'points' in data and data['points'] else [],
    81         5          119          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    82                             }

File: /home/isucon/webapp/python/app.py
Name: type_cast_point_data
Total time: 0.38017 [sec]
  Line      Hits         Time  Code
===================================
    46                         def type_cast_point_data(data):
    47       344          228      return {
    48       344          242          'id': int(data['id']),
    49       344          201          'stroke_id': int(data['stroke_id']),
    50       344       182508          'x': float(data['x']),
    51       344       196991          'y': float(data['y']),
    52                             }

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.035499 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           12      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            7      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            5      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            5      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1        35463      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.020278 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           51      cursor = db.cursor()
    32         2        20204      cursor.execute(sql, params)
    33         2           23      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: get_watcher_count
Total time: 0.012261 [sec]
  Line      Hits         Time  Code
===================================
   127                         def get_watcher_count(db, room_id):
   128         1            1      sql = 'SELECT COUNT(*) AS `watcher_count` FROM `room_watchers`'
   129         1            1      sql += ' WHERE `room_id` = %(room_id)s AND `updated_at` > CURRENT_TIMESTAMP(6) - INTERVAL 3 SECOND'
   130         1        12259      result = select_one(db, sql, {'room_id': room_id})
   131         1            0      return result['watcher_count']

File: /home/isucon/webapp/python/app.py
Name: get_strokes
Total time: 0.012227 [sec]
  Line      Hits         Time  Code
===================================
   116                         def get_strokes(db, room_id, greater_than_id):
   117         1            0      sql = 'SELECT `id`, `room_id`, `width`, `red`, `green`, `blue`, `alpha`, `created_at` FROM `strokes`'
   118         1            0      sql += ' WHERE `room_id` = %(room_id)s AND `id` > %(greater_than_id)s ORDER BY `id` ASC'
   119         1        12227      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.008031 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1         8031      return select_one(db, sql, {'room_id': room_id})

File: /home/isucon/webapp/python/app.py
Name: to_RFC3339_micro
Total time: 0.000117 [sec]
  Line      Hits         Time  Code
===================================
    66                         def to_RFC3339_micro(date):
    67                             # RFC3339では+00:00のときはZにするという仕様だが、pythonは準拠していないため
    68         6          117      return date.replace(tzinfo=UTC()).isoformat().replace('+00:00', 'Z')

File: /home/isucon/webapp/python/app.py
Name: utcoffset
Total time: 2.3e-05 [sec]
  Line      Hits         Time  Code
===================================
    56                             def utcoffset(self, dt):
    57         6           23          return timedelta(0)

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: post_api_csrf_token
Total time: 0.059503 [sec]
  Line      Hits         Time  Code
===================================
   147                         @app.route('/api/csrf_token', methods=['POST'])
   148                         def post_api_csrf_token():
   149         1        51010      db = get_db()
   150                         
   151         1            0      sql = 'INSERT INTO `tokens` (`csrf_token`) VALUES'
   152         1            0      sql += ' (SHA2(CONCAT(RAND(), UUID_SHORT()), 256))'
   153                         
   154         1         4005      id = execute(db, sql)
   155                         
   156         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens` WHERE id = %(id)s'
   157         1         4025      token = select_one(db, sql, {'id': id})
   158                         
   159         1          463      return jsonify({'token': token['csrf_token']})

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.050997 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           12      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1        50963      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.004019 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         1           21      cursor = db.cursor()
    32         1         3987      cursor.execute(sql, params)
    33         1           11      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: execute
Total time: 0.003987 [sec]
  Line      Hits         Time  Code
===================================
    24                         def execute(db, sql, params={}):
    25         1           25      cursor = db.cursor()
    26         1         3962      cursor.execute(sql, params)
    27         1            0      return cursor.lastrowid

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_rooms_id
Total time: 5.10584 [sec]
  Line      Hits         Time  Code
===================================
   241                         @app.route('/api/rooms/<id>')
   242                         def get_api_rooms_id(id):
   243         1        41927      db = get_db()
   244         1         4032      room = get_room(db, id)
   245                         
   246         1            1      if room is None:
   247                                 res = jsonify({'error': 'この部屋は存在しません。'})
   248                                 res.status_code = 500
   249                                 return res
   250                         
   251         1        12238      strokes = get_strokes(db, room['id'], 0)
   252         1       492674      points_all = get_strokes_with_points(db, room['id'], 0)
   253         1            1      points = {}
   254       265          131      for point in points_all:
   255       264          140          stroke_id = point['stroke_id']
   256       264          152          points.setdefault(stroke_id, [])
   257       264          147          points[stroke_id].append(point)
   258                         
   259         5            5      for i, stroke in enumerate(strokes):
   260         4            2          strokes[i]['points'] = points[stroke['id']]
   261                         
   262         1            1      room['strokes'] = strokes
   263         1        57899      room['watcher_count'] = get_watcher_count(db, room['id'])
   264                         
   265         1      4496490      return jsonify({'room': type_cast_room_data(room)})

File: /home/isucon/webapp/python/app.py
Name: select_all
Total time: 0.504887 [sec]
  Line      Hits         Time  Code
===================================
    36                         def select_all(db, sql, params={}):
    37         2           37      cursor = db.cursor()
    38         2       504830      cursor.execute(sql, params)
    39         2           20      return cursor.fetchall()

File: /home/isucon/webapp/python/app.py
Name: get_strokes_with_points
Total time: 0.492668 [sec]
  Line      Hits         Time  Code
===================================
   227                         def get_strokes_with_points(db, room_id, greater_than_id):
   228                             sql = '''
   229                             SELECT
   230                                 `points`.`id` AS `id`,
   231                                 `points`.`stroke_id` AS `stroke_id`,
   232                                 `points`.`x` AS `x`,
   233                                 `points`.`y` AS `y`
   234                             FROM `strokes`
   235                             JOIN `points` ON `points`.`stroke_id` = `strokes`.`id`
   236                             WHERE `strokes`.`room_id` = %(room_id)s AND `strokes`.`id` > %(greater_than_id)s
   237         1            0      ORDER BY `points`.`id` ASC'''
   238         1       492668      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: type_cast_room_data
Total time: 0.31912 [sec]
  Line      Hits         Time  Code
===================================
    85                         def type_cast_room_data(data):
    86         1            2      return {
    87         1            1          'id': int(data['id']),
    88         1            1          'name': data['name'],
    89         1            0          'canvas_width': int(data['canvas_width']),
    90         1            1          'canvas_height': int(data['canvas_height']),
    91         1           27          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    92         1       319086          'strokes': list(map(type_cast_stroke_data, data['strokes'])) if 'strokes' in data and data['strokes'] else [],
    93         1            1          'stroke_count': int(data.get('stroke_count', 0)),
    94         1            1          'watcher_count': int(data.get('watcher_count', 0)),
    95                             }

File: /home/isucon/webapp/python/app.py
Name: type_cast_stroke_data
Total time: 0.319046 [sec]
  Line      Hits         Time  Code
===================================
    71                         def type_cast_stroke_data(data):
    72         4            3      return {
    73         4            4          'id': int(data['id']),
    74         4            2          'room_id': int(data['room_id']),
    75         4            4          'width': int(data['width']),
    76         4            2          'red': int(data['red']),
    77         4            2          'green': int(data['green']),
    78         4            4          'blue': int(data['blue']),
    79         4          124          'alpha': float(data['alpha']),
    80         4       318817          'points': list(map(type_cast_point_data, data['points'])) if 'points' in data and data['points'] else [],
    81         4           84          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    82                             }

File: /home/isucon/webapp/python/app.py
Name: type_cast_point_data
Total time: 0.237446 [sec]
  Line      Hits         Time  Code
===================================
    46                         def type_cast_point_data(data):
    47       264          232      return {
    48       264          187          'id': int(data['id']),
    49       264          159          'stroke_id': int(data['stroke_id']),
    50       264        75881          'x': float(data['x']),
    51       264       160987          'y': float(data['y']),
    52                             }

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.0619 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           48      cursor = db.cursor()
    32         2        61830      cursor.execute(sql, params)
    33         2           22      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: get_watcher_count
Total time: 0.057892 [sec]
  Line      Hits         Time  Code
===================================
   127                         def get_watcher_count(db, room_id):
   128         1            1      sql = 'SELECT COUNT(*) AS `watcher_count` FROM `room_watchers`'
   129         1            1      sql += ' WHERE `room_id` = %(room_id)s AND `updated_at` > CURRENT_TIMESTAMP(6) - INTERVAL 3 SECOND'
   130         1        57889      result = select_one(db, sql, {'room_id': room_id})
   131         1            1      return result['watcher_count']

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.041913 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           14      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1        41877      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: get_strokes
Total time: 0.012232 [sec]
  Line      Hits         Time  Code
===================================
   116                         def get_strokes(db, room_id, greater_than_id):
   117         1            0      sql = 'SELECT `id`, `room_id`, `width`, `red`, `green`, `blue`, `alpha`, `created_at` FROM `strokes`'
   118         1            1      sql += ' WHERE `room_id` = %(room_id)s AND `id` > %(greater_than_id)s ORDER BY `id` ASC'
   119         1        12231      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.004027 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1         4026      return select_one(db, sql, {'room_id': room_id})

File: /home/isucon/webapp/python/app.py
Name: to_RFC3339_micro
Total time: 9.2e-05 [sec]
  Line      Hits         Time  Code
===================================
    66                         def to_RFC3339_micro(date):
    67                             # RFC3339では+00:00のときはZにするという仕様だが、pythonは準拠していないため
    68         5           92      return date.replace(tzinfo=UTC()).isoformat().replace('+00:00', 'Z')

File: /home/isucon/webapp/python/app.py
Name: utcoffset
Total time: 1.8e-05 [sec]
  Line      Hits         Time  Code
===================================
    56                             def utcoffset(self, dt):
    57         5           18          return timedelta(0)

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: post_api_csrf_token
Total time: 0.039589 [sec]
  Line      Hits         Time  Code
===================================
   147                         @app.route('/api/csrf_token', methods=['POST'])
   148                         def post_api_csrf_token():
   149         1        27186      db = get_db()
   150                         
   151         1            0      sql = 'INSERT INTO `tokens` (`csrf_token`) VALUES'
   152         1            1      sql += ' (SHA2(CONCAT(RAND(), UUID_SHORT()), 256))'
   153                         
   154         1         7968      id = execute(db, sql)
   155                         
   156         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens` WHERE id = %(id)s'
   157         1         3879      token = select_one(db, sql, {'id': id})
   158                         
   159         1          554      return jsonify({'token': token['csrf_token']})

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.027172 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           16      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1           10      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1        27130      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: execute
Total time: 0.007962 [sec]
  Line      Hits         Time  Code
===================================
    24                         def execute(db, sql, params={}):
    25         1           23      cursor = db.cursor()
    26         1         7938      cursor.execute(sql, params)
    27         1            1      return cursor.lastrowid

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.003872 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         1           19      cursor = db.cursor()
    32         1         3840      cursor.execute(sql, params)
    33         1           13      return cursor.fetchone()

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: post_api_csrf_token
Total time: 0.031371 [sec]
  Line      Hits         Time  Code
===================================
   147                         @app.route('/api/csrf_token', methods=['POST'])
   148                         def post_api_csrf_token():
   149         1        22994      db = get_db()
   150                         
   151         1            0      sql = 'INSERT INTO `tokens` (`csrf_token`) VALUES'
   152         1            1      sql += ' (SHA2(CONCAT(RAND(), UUID_SHORT()), 256))'
   153                         
   154         1         4466      id = execute(db, sql)
   155                         
   156         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens` WHERE id = %(id)s'
   157         1         3402      token = select_one(db, sql, {'id': id})
   158                         
   159         1          508      return jsonify({'token': token['csrf_token']})

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.022973 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           16      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1        22932      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: execute
Total time: 0.004461 [sec]
  Line      Hits         Time  Code
===================================
    24                         def execute(db, sql, params={}):
    25         1           25      cursor = db.cursor()
    26         1         4435      cursor.execute(sql, params)
    27         1            1      return cursor.lastrowid

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.003395 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         1           20      cursor = db.cursor()
    32         1         3364      cursor.execute(sql, params)
    33         1           11      return cursor.fetchone()

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_rooms_id
Total time: 4.68728 [sec]
  Line      Hits         Time  Code
===================================
   241                         @app.route('/api/rooms/<id>')
   242                         def get_api_rooms_id(id):
   243         1        39798      db = get_db()
   244         1          747      room = get_room(db, id)
   245                         
   246         1            0      if room is None:
   247                                 res = jsonify({'error': 'この部屋は存在しません。'})
   248                                 res.status_code = 500
   249                                 return res
   250                         
   251         1         4408      strokes = get_strokes(db, room['id'], 0)
   252         1       346064      points_all = get_strokes_with_points(db, room['id'], 0)
   253         1            1      points = {}
   254       265          124      for point in points_all:
   255       264          177          stroke_id = point['stroke_id']
   256       264          292          points.setdefault(stroke_id, [])
   257       264          159          points[stroke_id].append(point)
   258                         
   259         5            4      for i, stroke in enumerate(strokes):
   260         4            5          strokes[i]['points'] = points[stroke['id']]
   261                         
   262         1            1      room['strokes'] = strokes
   263         1        22973      room['watcher_count'] = get_watcher_count(db, room['id'])
   264                         
   265         1      4272527      return jsonify({'room': type_cast_room_data(room)})

File: /home/isucon/webapp/python/app.py
Name: select_all
Total time: 0.350446 [sec]
  Line      Hits         Time  Code
===================================
    36                         def select_all(db, sql, params={}):
    37         2           36      cursor = db.cursor()
    38         2       350391      cursor.execute(sql, params)
    39         2           19      return cursor.fetchall()

File: /home/isucon/webapp/python/app.py
Name: get_strokes_with_points
Total time: 0.346058 [sec]
  Line      Hits         Time  Code
===================================
   227                         def get_strokes_with_points(db, room_id, greater_than_id):
   228                             sql = '''
   229                             SELECT
   230                                 `points`.`id` AS `id`,
   231                                 `points`.`stroke_id` AS `stroke_id`,
   232                                 `points`.`x` AS `x`,
   233                                 `points`.`y` AS `y`
   234                             FROM `strokes`
   235                             JOIN `points` ON `points`.`stroke_id` = `strokes`.`id`
   236                             WHERE `strokes`.`room_id` = %(room_id)s AND `strokes`.`id` > %(greater_than_id)s
   237         1            0      ORDER BY `points`.`id` ASC'''
   238         1       346058      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: type_cast_room_data
Total time: 0.269156 [sec]
  Line      Hits         Time  Code
===================================
    85                         def type_cast_room_data(data):
    86         1            1      return {
    87         1            2          'id': int(data['id']),
    88         1            0          'name': data['name'],
    89         1            1          'canvas_width': int(data['canvas_width']),
    90         1            1          'canvas_height': int(data['canvas_height']),
    91         1           21          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    92         1       269127          'strokes': list(map(type_cast_stroke_data, data['strokes'])) if 'strokes' in data and data['strokes'] else [],
    93         1            2          'stroke_count': int(data.get('stroke_count', 0)),
    94         1            1          'watcher_count': int(data.get('watcher_count', 0)),
    95                             }

File: /home/isucon/webapp/python/app.py
Name: type_cast_stroke_data
Total time: 0.269087 [sec]
  Line      Hits         Time  Code
===================================
    71                         def type_cast_stroke_data(data):
    72         4            4      return {
    73         4            4          'id': int(data['id']),
    74         4            4          'room_id': int(data['room_id']),
    75         4            3          'width': int(data['width']),
    76         4            3          'red': int(data['red']),
    77         4            3          'green': int(data['green']),
    78         4            2          'blue': int(data['blue']),
    79         4          124          'alpha': float(data['alpha']),
    80         4       268870          'points': list(map(type_cast_point_data, data['points'])) if 'points' in data and data['points'] else [],
    81         4           70          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    82                             }

File: /home/isucon/webapp/python/app.py
Name: type_cast_point_data
Total time: 0.268039 [sec]
  Line      Hits         Time  Code
===================================
    46                         def type_cast_point_data(data):
    47       264          193      return {
    48       264          155          'id': int(data['id']),
    49       264          134          'stroke_id': int(data['stroke_id']),
    50       264       135686          'x': float(data['x']),
    51       264       131871          'y': float(data['y']),
    52                             }

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.039784 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1        39750      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.023691 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           49      cursor = db.cursor()
    32         2        23621      cursor.execute(sql, params)
    33         2           21      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: get_watcher_count
Total time: 0.022966 [sec]
  Line      Hits         Time  Code
===================================
   127                         def get_watcher_count(db, room_id):
   128         1            1      sql = 'SELECT COUNT(*) AS `watcher_count` FROM `room_watchers`'
   129         1            1      sql += ' WHERE `room_id` = %(room_id)s AND `updated_at` > CURRENT_TIMESTAMP(6) - INTERVAL 3 SECOND'
   130         1        22963      result = select_one(db, sql, {'room_id': room_id})
   131         1            1      return result['watcher_count']

File: /home/isucon/webapp/python/app.py
Name: get_strokes
Total time: 0.004404 [sec]
  Line      Hits         Time  Code
===================================
   116                         def get_strokes(db, room_id, greater_than_id):
   117         1            1      sql = 'SELECT `id`, `room_id`, `width`, `red`, `green`, `blue`, `alpha`, `created_at` FROM `strokes`'
   118         1            1      sql += ' WHERE `room_id` = %(room_id)s AND `id` > %(greater_than_id)s ORDER BY `id` ASC'
   119         1         4402      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000744 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          743      return select_one(db, sql, {'room_id': room_id})

File: /home/isucon/webapp/python/app.py
Name: to_RFC3339_micro
Total time: 7.6e-05 [sec]
  Line      Hits         Time  Code
===================================
    66                         def to_RFC3339_micro(date):
    67                             # RFC3339では+00:00のときはZにするという仕様だが、pythonは準拠していないため
    68         5           76      return date.replace(tzinfo=UTC()).isoformat().replace('+00:00', 'Z')

File: /home/isucon/webapp/python/app.py
Name: utcoffset
Total time: 1.5e-05 [sec]
  Line      Hits         Time  Code
===================================
    56                             def utcoffset(self, dt):
    57         5           15          return timedelta(0)

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_rooms_id
Total time: 2.47201 [sec]
  Line      Hits         Time  Code
===================================
   241                         @app.route('/api/rooms/<id>')
   242                         def get_api_rooms_id(id):
   243         1        73133      db = get_db()
   244         1        12015      room = get_room(db, id)
   245                         
   246         1            1      if room is None:
   247                                 res = jsonify({'error': 'この部屋は存在しません。'})
   248                                 res.status_code = 500
   249                                 return res
   250                         
   251         1         4319      strokes = get_strokes(db, room['id'], 0)
   252         1       200609      points_all = get_strokes_with_points(db, room['id'], 0)
   253         1            1      points = {}
   254       161           68      for point in points_all:
   255       160           67          stroke_id = point['stroke_id']
   256       160           93          points.setdefault(stroke_id, [])
   257       160          118          points[stroke_id].append(point)
   258                         
   259         4            3      for i, stroke in enumerate(strokes):
   260         3            4          strokes[i]['points'] = points[stroke['id']]
   261                         
   262         1            1      room['strokes'] = strokes
   263         1        50056      room['watcher_count'] = get_watcher_count(db, room['id'])
   264                         
   265         1      2131520      return jsonify({'room': type_cast_room_data(room)})

File: /home/isucon/webapp/python/app.py
Name: select_all
Total time: 0.204904 [sec]
  Line      Hits         Time  Code
===================================
    36                         def select_all(db, sql, params={}):
    37         2           37      cursor = db.cursor()
    38         2       204848      cursor.execute(sql, params)
    39         2           19      return cursor.fetchall()

File: /home/isucon/webapp/python/app.py
Name: get_strokes_with_points
Total time: 0.200602 [sec]
  Line      Hits         Time  Code
===================================
   227                         def get_strokes_with_points(db, room_id, greater_than_id):
   228                             sql = '''
   229                             SELECT
   230                                 `points`.`id` AS `id`,
   231                                 `points`.`stroke_id` AS `stroke_id`,
   232                                 `points`.`x` AS `x`,
   233                                 `points`.`y` AS `y`
   234                             FROM `strokes`
   235                             JOIN `points` ON `points`.`stroke_id` = `strokes`.`id`
   236                             WHERE `strokes`.`room_id` = %(room_id)s AND `strokes`.`id` > %(greater_than_id)s
   237         1            0      ORDER BY `points`.`id` ASC'''
   238         1       200602      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: type_cast_room_data
Total time: 0.118943 [sec]
  Line      Hits         Time  Code
===================================
    85                         def type_cast_room_data(data):
    86         1            1      return {
    87         1            1          'id': int(data['id']),
    88         1            0          'name': data['name'],
    89         1            1          'canvas_width': int(data['canvas_width']),
    90         1            1          'canvas_height': int(data['canvas_height']),
    91         1           19          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    92         1       118918          'strokes': list(map(type_cast_stroke_data, data['strokes'])) if 'strokes' in data and data['strokes'] else [],
    93         1            1          'stroke_count': int(data.get('stroke_count', 0)),
    94         1            1          'watcher_count': int(data.get('watcher_count', 0)),
    95                             }

File: /home/isucon/webapp/python/app.py
Name: type_cast_stroke_data
Total time: 0.118891 [sec]
  Line      Hits         Time  Code
===================================
    71                         def type_cast_stroke_data(data):
    72         3            3      return {
    73         3            3          'id': int(data['id']),
    74         3            1          'room_id': int(data['room_id']),
    75         3            2          'width': int(data['width']),
    76         3            2          'red': int(data['red']),
    77         3            1          'green': int(data['green']),
    78         3            1          'blue': int(data['blue']),
    79         3          156          'alpha': float(data['alpha']),
    80         3       118679          'points': list(map(type_cast_point_data, data['points'])) if 'points' in data and data['points'] else [],
    81         3           43          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    82                             }

File: /home/isucon/webapp/python/app.py
Name: type_cast_point_data
Total time: 0.118174 [sec]
  Line      Hits         Time  Code
===================================
    46                         def type_cast_point_data(data):
    47       160           85      return {
    48       160           93          'id': int(data['id']),
    49       160           93          'stroke_id': int(data['stroke_id']),
    50       160         4440          'x': float(data['x']),
    51       160       113463          'y': float(data['y']),
    52                             }

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.073121 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            7      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1        73082      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.062036 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           42      cursor = db.cursor()
    32         2        61961      cursor.execute(sql, params)
    33         2           33      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: get_watcher_count
Total time: 0.050049 [sec]
  Line      Hits         Time  Code
===================================
   127                         def get_watcher_count(db, room_id):
   128         1            0      sql = 'SELECT COUNT(*) AS `watcher_count` FROM `room_watchers`'
   129         1            1      sql += ' WHERE `room_id` = %(room_id)s AND `updated_at` > CURRENT_TIMESTAMP(6) - INTERVAL 3 SECOND'
   130         1        50048      result = select_one(db, sql, {'room_id': room_id})
   131         1            0      return result['watcher_count']

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.01201 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1        12010      return select_one(db, sql, {'room_id': room_id})

File: /home/isucon/webapp/python/app.py
Name: get_strokes
Total time: 0.004315 [sec]
  Line      Hits         Time  Code
===================================
   116                         def get_strokes(db, room_id, greater_than_id):
   117         1            1      sql = 'SELECT `id`, `room_id`, `width`, `red`, `green`, `blue`, `alpha`, `created_at` FROM `strokes`'
   118         1            1      sql += ' WHERE `room_id` = %(room_id)s AND `id` > %(greater_than_id)s ORDER BY `id` ASC'
   119         1         4313      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: to_RFC3339_micro
Total time: 5.2e-05 [sec]
  Line      Hits         Time  Code
===================================
    66                         def to_RFC3339_micro(date):
    67                             # RFC3339では+00:00のときはZにするという仕様だが、pythonは準拠していないため
    68         4           52      return date.replace(tzinfo=UTC()).isoformat().replace('+00:00', 'Z')

File: /home/isucon/webapp/python/app.py
Name: utcoffset
Total time: 1e-05 [sec]
  Line      Hits         Time  Code
===================================
    56                             def utcoffset(self, dt):
    57         4           10          return timedelta(0)

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_rooms_id
Total time: 2.67162 [sec]
  Line      Hits         Time  Code
===================================
   241                         @app.route('/api/rooms/<id>')
   242                         def get_api_rooms_id(id):
   243         1        76855      db = get_db()
   244         1         4038      room = get_room(db, id)
   245                         
   246         1            1      if room is None:
   247                                 res = jsonify({'error': 'この部屋は存在しません。'})
   248                                 res.status_code = 500
   249                                 return res
   250                         
   251         1         8169      strokes = get_strokes(db, room['id'], 0)
   252         1       193206      points_all = get_strokes_with_points(db, room['id'], 0)
   253         1            1      points = {}
   254       161           68      for point in points_all:
   255       160           74          stroke_id = point['stroke_id']
   256       160           96          points.setdefault(stroke_id, [])
   257       160          117          points[stroke_id].append(point)
   258                         
   259         4            4      for i, stroke in enumerate(strokes):
   260         3            2          strokes[i]['points'] = points[stroke['id']]
   261                         
   262         1            2      room['strokes'] = strokes
   263         1        38859      room['watcher_count'] = get_watcher_count(db, room['id'])
   264                         
   265         1      2350129      return jsonify({'room': type_cast_room_data(room)})

File: /home/isucon/webapp/python/app.py
Name: select_all
Total time: 0.201349 [sec]
  Line      Hits         Time  Code
===================================
    36                         def select_all(db, sql, params={}):
    37         2           49      cursor = db.cursor()
    38         2       201279      cursor.execute(sql, params)
    39         2           21      return cursor.fetchall()

File: /home/isucon/webapp/python/app.py
Name: get_strokes_with_points
Total time: 0.1932 [sec]
  Line      Hits         Time  Code
===================================
   227                         def get_strokes_with_points(db, room_id, greater_than_id):
   228                             sql = '''
   229                             SELECT
   230                                 `points`.`id` AS `id`,
   231                                 `points`.`stroke_id` AS `stroke_id`,
   232                                 `points`.`x` AS `x`,
   233                                 `points`.`y` AS `y`
   234                             FROM `strokes`
   235                             JOIN `points` ON `points`.`stroke_id` = `strokes`.`id`
   236                             WHERE `strokes`.`room_id` = %(room_id)s AND `strokes`.`id` > %(greater_than_id)s
   237         1            1      ORDER BY `points`.`id` ASC'''
   238         1       193199      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: type_cast_room_data
Total time: 0.118517 [sec]
  Line      Hits         Time  Code
===================================
    85                         def type_cast_room_data(data):
    86         1            1      return {
    87         1            2          'id': int(data['id']),
    88         1            1          'name': data['name'],
    89         1            1          'canvas_width': int(data['canvas_width']),
    90         1            1          'canvas_height': int(data['canvas_height']),
    91         1           25          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    92         1       118483          'strokes': list(map(type_cast_stroke_data, data['strokes'])) if 'strokes' in data and data['strokes'] else [],
    93         1            2          'stroke_count': int(data.get('stroke_count', 0)),
    94         1            1          'watcher_count': int(data.get('watcher_count', 0)),
    95                             }

File: /home/isucon/webapp/python/app.py
Name: type_cast_stroke_data
Total time: 0.118412 [sec]
  Line      Hits         Time  Code
===================================
    71                         def type_cast_stroke_data(data):
    72         3            4      return {
    73         3            3          'id': int(data['id']),
    74         3            2          'room_id': int(data['room_id']),
    75         3            2          'width': int(data['width']),
    76         3            2          'red': int(data['red']),
    77         3            2          'green': int(data['green']),
    78         3            1          'blue': int(data['blue']),
    79         3           98          'alpha': float(data['alpha']),
    80         3       118238          'points': list(map(type_cast_point_data, data['points'])) if 'points' in data and data['points'] else [],
    81         3           60          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    82                             }

File: /home/isucon/webapp/python/app.py
Name: type_cast_point_data
Total time: 0.117669 [sec]
  Line      Hits         Time  Code
===================================
    46                         def type_cast_point_data(data):
    47       160           75      return {
    48       160        52133          'id': int(data['id']),
    49       160           82          'stroke_id': int(data['stroke_id']),
    50       160        60507          'x': float(data['x']),
    51       160         4872          'y': float(data['y']),
    52                             }

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.076842 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1        76804      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.04287 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           47      cursor = db.cursor()
    32         2        42802      cursor.execute(sql, params)
    33         2           21      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: get_watcher_count
Total time: 0.038852 [sec]
  Line      Hits         Time  Code
===================================
   127                         def get_watcher_count(db, room_id):
   128         1            0      sql = 'SELECT COUNT(*) AS `watcher_count` FROM `room_watchers`'
   129         1            1      sql += ' WHERE `room_id` = %(room_id)s AND `updated_at` > CURRENT_TIMESTAMP(6) - INTERVAL 3 SECOND'
   130         1        38850      result = select_one(db, sql, {'room_id': room_id})
   131         1            1      return result['watcher_count']

File: /home/isucon/webapp/python/app.py
Name: get_strokes
Total time: 0.008164 [sec]
  Line      Hits         Time  Code
===================================
   116                         def get_strokes(db, room_id, greater_than_id):
   117         1            0      sql = 'SELECT `id`, `room_id`, `width`, `red`, `green`, `blue`, `alpha`, `created_at` FROM `strokes`'
   118         1            1      sql += ' WHERE `room_id` = %(room_id)s AND `id` > %(greater_than_id)s ORDER BY `id` ASC'
   119         1         8163      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.004034 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1         4034      return select_one(db, sql, {'room_id': room_id})

File: /home/isucon/webapp/python/app.py
Name: to_RFC3339_micro
Total time: 7.1e-05 [sec]
  Line      Hits         Time  Code
===================================
    66                         def to_RFC3339_micro(date):
    67                             # RFC3339では+00:00のときはZにするという仕様だが、pythonは準拠していないため
    68         4           71      return date.replace(tzinfo=UTC()).isoformat().replace('+00:00', 'Z')

File: /home/isucon/webapp/python/app.py
Name: utcoffset
Total time: 1.3e-05 [sec]
  Line      Hits         Time  Code
===================================
    56                             def utcoffset(self, dt):
    57         4           13          return timedelta(0)

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_rooms_id
Total time: 4.52176 [sec]
  Line      Hits         Time  Code
===================================
   241                         @app.route('/api/rooms/<id>')
   242                         def get_api_rooms_id(id):
   243         1        85315      db = get_db()
   244         1         4035      room = get_room(db, id)
   245                         
   246         1            0      if room is None:
   247                                 res = jsonify({'error': 'この部屋は存在しません。'})
   248                                 res.status_code = 500
   249                                 return res
   250                         
   251         1         4449      strokes = get_strokes(db, room['id'], 0)
   252         1       443840      points_all = get_strokes_with_points(db, room['id'], 0)
   253         1            0      points = {}
   254       283          123      for point in points_all:
   255       282          135          stroke_id = point['stroke_id']
   256       282          208          points.setdefault(stroke_id, [])
   257       282          134          points[stroke_id].append(point)
   258                         
   259         5            4      for i, stroke in enumerate(strokes):
   260         4            3          strokes[i]['points'] = points[stroke['id']]
   261                         
   262         1            2      room['strokes'] = strokes
   263         1        33965      room['watcher_count'] = get_watcher_count(db, room['id'])
   264                         
   265         1      3949545      return jsonify({'room': type_cast_room_data(room)})

File: /home/isucon/webapp/python/app.py
Name: select_all
Total time: 0.448265 [sec]
  Line      Hits         Time  Code
===================================
    36                         def select_all(db, sql, params={}):
    37         2           35      cursor = db.cursor()
    38         2       448209      cursor.execute(sql, params)
    39         2           21      return cursor.fetchall()

File: /home/isucon/webapp/python/app.py
Name: get_strokes_with_points
Total time: 0.443834 [sec]
  Line      Hits         Time  Code
===================================
   227                         def get_strokes_with_points(db, room_id, greater_than_id):
   228                             sql = '''
   229                             SELECT
   230                                 `points`.`id` AS `id`,
   231                                 `points`.`stroke_id` AS `stroke_id`,
   232                                 `points`.`x` AS `x`,
   233                                 `points`.`y` AS `y`
   234                             FROM `strokes`
   235                             JOIN `points` ON `points`.`stroke_id` = `strokes`.`id`
   236                             WHERE `strokes`.`room_id` = %(room_id)s AND `strokes`.`id` > %(greater_than_id)s
   237         1            0      ORDER BY `points`.`id` ASC'''
   238         1       443834      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: type_cast_room_data
Total time: 0.266399 [sec]
  Line      Hits         Time  Code
===================================
    85                         def type_cast_room_data(data):
    86         1            1      return {
    87         1            2          'id': int(data['id']),
    88         1            0          'name': data['name'],
    89         1            1          'canvas_width': int(data['canvas_width']),
    90         1            1          'canvas_height': int(data['canvas_height']),
    91         1           23          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    92         1       266369          'strokes': list(map(type_cast_stroke_data, data['strokes'])) if 'strokes' in data and data['strokes'] else [],
    93         1            2          'stroke_count': int(data.get('stroke_count', 0)),
    94         1            0          'watcher_count': int(data.get('watcher_count', 0)),
    95                             }

File: /home/isucon/webapp/python/app.py
Name: type_cast_stroke_data
Total time: 0.266048 [sec]
  Line      Hits         Time  Code
===================================
    71                         def type_cast_stroke_data(data):
    72         4            4      return {
    73         4            4          'id': int(data['id']),
    74         4            1          'room_id': int(data['room_id']),
    75         4            3          'width': int(data['width']),
    76         4            3          'red': int(data['red']),
    77         4            1          'green': int(data['green']),
    78         4            3          'blue': int(data['blue']),
    79         4          125          'alpha': float(data['alpha']),
    80         4       265822          'points': list(map(type_cast_point_data, data['points'])) if 'points' in data and data['points'] else [],
    81         4           82          'created_at': to_RFC3339_micro(data['created_at']) if data['created_at'] else '',
    82                             }

File: /home/isucon/webapp/python/app.py
Name: type_cast_point_data
Total time: 0.186352 [sec]
  Line      Hits         Time  Code
===================================
    46                         def type_cast_point_data(data):
    47       282        61496      return {
    48       282          207          'id': int(data['id']),
    49       282          121          'stroke_id': int(data['stroke_id']),
    50       282        96846          'x': float(data['x']),
    51       282        27682          'y': float(data['y']),
    52                             }

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.085299 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            7      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1        85261      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.037972 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           48      cursor = db.cursor()
    32         2        37884      cursor.execute(sql, params)
    33         2           40      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: get_watcher_count
Total time: 0.033957 [sec]
  Line      Hits         Time  Code
===================================
   127                         def get_watcher_count(db, room_id):
   128         1            1      sql = 'SELECT COUNT(*) AS `watcher_count` FROM `room_watchers`'
   129         1            1      sql += ' WHERE `room_id` = %(room_id)s AND `updated_at` > CURRENT_TIMESTAMP(6) - INTERVAL 3 SECOND'
   130         1        33955      result = select_one(db, sql, {'room_id': room_id})
   131         1            0      return result['watcher_count']

File: /home/isucon/webapp/python/app.py
Name: get_strokes
Total time: 0.004445 [sec]
  Line      Hits         Time  Code
===================================
   116                         def get_strokes(db, room_id, greater_than_id):
   117         1            1      sql = 'SELECT `id`, `room_id`, `width`, `red`, `green`, `blue`, `alpha`, `created_at` FROM `strokes`'
   118         1            1      sql += ' WHERE `room_id` = %(room_id)s AND `id` > %(greater_than_id)s ORDER BY `id` ASC'
   119         1         4443      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.004031 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1         4030      return select_one(db, sql, {'room_id': room_id})

File: /home/isucon/webapp/python/app.py
Name: to_RFC3339_micro
Total time: 9e-05 [sec]
  Line      Hits         Time  Code
===================================
    66                         def to_RFC3339_micro(date):
    67                             # RFC3339では+00:00のときはZにするという仕様だが、pythonは準拠していないため
    68         5           90      return date.replace(tzinfo=UTC()).isoformat().replace('+00:00', 'Z')

File: /home/isucon/webapp/python/app.py
Name: utcoffset
Total time: 1.6e-05 [sec]
  Line      Hits         Time  Code
===================================
    56                             def utcoffset(self, dt):
    57         5           16          return timedelta(0)

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003614 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2041      db = get_db()
   271                         
   272         1            0      try:
   273         1          891          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          469      room = get_room(db, id)
   281                         
   282         1            1      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            0      last_stroke_id = 0
   289         1           88      if 'Last-Event-ID' in request.headers:
   290         1           39          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     nede
===================================
    56                             def utcoffset(self, dt):
    57         5           18          return timedelta(0)

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003487 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2020      db = get_db()
   271                         
   272         1            1      try:
   273         1          898          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          382      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            0      last_stroke_id = 0
   289         1           61      if 'Last-Event-ID' in request.headers:
   290         1           39          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           85      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.002003 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            7      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1966      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.00103 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           42      cursor = db.cursor()
    32         2          967      cursor.execute(sql, params)
    33         2           21      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000667 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          665      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000377 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          377      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003455 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         1969      db = get_db()
   271                         
   272         1            1      try:
   273         1          774          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          489      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            0      last_stroke_id = 0
   289         1           77      if 'Last-Event-ID' in request.headers:
   290         1           42          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1          102      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001954 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           17      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1           10      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1911      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000993 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           40      cursor = db.cursor()
    32         2          923      cursor.execute(sql, params)
    33    23      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.008109 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1         8108      return select_one(db, sql, {'room_id': room_id})

File: /home/isucon/webapp/python/app.py
Name: get_watcher_count
Total time: 0.000763 [sec]
  Line      Hits         Time  Code
===================================
   127                         def get_watcher_count(db, room_id):
   128         1            0      sql = 'SELECT COUNT(*) AS `watcher_count` FROM `room_watchers`'
   129         1            1      sql += ' WHERE `room_id` = %(room_id)s AND `updated_at` > CURRENT_TIMESTAMP(6) - INTERVAL 3 SECOND'
   130         1          761      result = select_one(db, sql, {'room_id': room_id})
   131         1            1      return result['watcher_count']

File: /home/isucon/webapp/python/app.py
Name: to_RFC3339_micro
Total time: 7.5e-05 [sec]
  Line      Hits         Time  Code
===================================
    66                         def to_RFC3339_micro(date):
    67                             # RFC3339では+00:00のときはZにするという仕様だが、pythonは準拠していないため
    68         5           75      return date.replace(tzinfo=UTC()).isoformat().replace('+00:00', 'Z')

File: /home/isucon/webapp/python/app.py
Name: utcoffset
Total time: 1.2e-05 [sec]
  Line      Hits         Time  Code
===================================
    56                             def utcoffset(self, dt):
    57         5           12          return timedelta(0)

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003521 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         1939      db = get_db()
   271                         
   272         1            0      try:
   273         1          924          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          442      room = get_room(db, id)
   281                         
   282         1            1      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            0      last_stroke_id = 0
   289         1           70      if 'Last-Event-ID' in request.headers:
   290         1           45          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           99      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001924 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           12      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            7      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1891      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.001076 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           43      cursor = db.cursor()
    32         2         1012      cursor.execute(sql, params)
    33         2           21      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000653 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          651      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000437 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          437      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003606 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2125      db = get_db()
   271                         
   272         1            1      try:
   273         1          860          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          373      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            1      last_stroke_id = 0
   289         1           61      if 'Last-Event-ID' in request.headers:
   290         1           52          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1          132      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.002113 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         2077      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.001011 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           41      cursor = db.cursor()
    32         2          952      cursor.execute(sql, params)
    33         2           18      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000656 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          654      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000369 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          369      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003479 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2067      db = get_db()
   271                         
   272         1            1      try:
   273         1          795          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          400      room = get_room(db, id)
   281                         
   282         1            1      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            0      last_stroke_id = 0
   289         1           67      if 'Last-Event-ID' in request.headers:
   290         1           44          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1          103      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.002053 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            5      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         2018      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000943 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_oAMP(6) - INTERVAL 1 DAY'
   105         1          924      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000388 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          387      return select_one(db, sql, {'room_id': room_id})

, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            1      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000396 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          395      return select_one(db, sql, {'room_id': room_id})

 103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          584      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000384 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          384      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003355 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         1933      db = get_db()
   271                         
   272         1            1      try:
   273         1          851          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          380      room = get_room(db, id)
   281                         
   282         1            1      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            1      last_stroke_id = 0
   289         1           63      if 'Last-Event-ID' in request.headers:
   290         1           38          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           86      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.00192 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1885      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000994 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           42      cursor = db.cursor()
    32         2          931      cursor.execute(sql, params)
    33         2           21      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000649 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_tok    20         1            0      autocommit = True
    21         1        16007      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.010999 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           53      cursor = db.cursor()
    32         2        10923      cursor.execute(sql, params)
    33         2           23      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: get_watcher_count
Total time: 0.006996 [sec]
  Line      Hits         Time  Code
===================================
   127                         def get_watcher_count(db, room_id):
   128         1            0      sql = 'SELECT COUNT(*) AS `watcher_count` FROM `room_watchers`'
   129         1            1      sql += ' WHERE `room_id` = %(room_id)s AND `updated_at` > CURRENT_TIMESTAMP(6) - INTERVAL 3 SECOND'
   130         1         6994      result = select_one(db, sql, {'room_id': room_id})
   131         1            1      return result['watcher_count']

File: /home/isucon/webapp/python/app.py
Name: get_strokes
Total time: 0.0042 [sec]
  Line      Hits         Time  Code
===================================
   116                         def get_strokes(db, room_id, greater_than_id):
   117         1            0      sql = 'SELECT `id`, `room_id`, `width`, `red`, `green`, `blue`, `alpha`, `created_at` FROM `strokes`'
   118         1            1      sql += ' WHERE `room_id` = %(room_id)s AND `id` > %(greater_than_id)s ORDER BY `id` ASC'
   119         1         4199      return select_all(db, sql, {'room_id': room_id, 'greater_than_id': greater_than_id})

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.004032 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1         4032      return select_one(db, sql, {'room_id': room_id})

File: /home/isucon/webapp/python/app.py
Name: to_RFC3339_micro
Total time: 9.8e-05 [sec]
  Line      Hits         Time  Code
===================================
    66                         def to_RFC3339_micro(date):
    67                             # RFC3339では+00:00のときはZにするという仕様だが、pythonは準拠していないため
    68         5           98      return date.replace(tzinfo=UTC()).isoformat().replace('+00:00', 'Z')

File: /home/isucon/webapp/python/app.py
Name: utcoffset
Total time: 1.6e-05 [sec]
  Line      Hits         Time  Code
===================================
    56                             def utcoffset(self, dt):
    57         5           16          return timedelta(0)

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003422 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         1984      db = get_db()
   271                         
   272         1            1      try:
   273         1          852          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          342      room = get_room(db, id)
   281                         
   282         1            1      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            1      last_stroke_id = 0
   289         1           61      if 'Last-Event-ID' in request.headers:
   290         1           39          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            0      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1          141      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001971 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         1936      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/mmit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000944 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           43      cursor = db.cursor()
    32         2          881      cursor.execute(sql, params)
    33         2           20      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000598 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          597      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000359 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          359      return select_one(db, sql, {'room_id': room_id})

ebapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003439 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2039      db = get_db()
   271                         
   272         1            0      try:
   273         1          811          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          379      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            1      last_stroke_id = 0
   289         1           67      if 'Last-Event-ID' in request.headers:
   290         1           45          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            0      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           97      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.002026 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           12      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         1993      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000907 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           42      cursor = db.cursor()
    32         2          809      cursor.execute(sql, params)
    33         2           56      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000545 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          544      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000375 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          375      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.00323 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         1974      db = get_db()
   271                         
   272         1            0      try:
   273         1          712          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          360      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            0      last_stroke_id = 0
   289         1           61      if 'Last-Event-ID' in request.headers:
   290         1           38          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           84      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001961 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           12      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            5      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         1927      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000851 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           41      cursor = db.cursor()
    32         2          790      cursor.execute(sql, params)
    33         2           20      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000509 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          507      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000355 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          355      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003313 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         1984      db = get_db()
   271                         
   272         1            1      try:
   273         1          746          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          373      room = get_room(db, id)
   281                         
   282         1            1      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            1      last_stroke_id = 0
   289         1 id)s'
   124         1          375      return select_one(db, sql, {'room_id': room_id})

        1      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000482 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          482      return select_one(db, sql, {'room_id': room_id})

cher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           93      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001971 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           14      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            7      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1931      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.00086 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           42      cursor = db.cursor()
    32         2          798      cursor.execute(sql, params)
    33         2           20      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000504 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          503      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000369 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          369      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003446 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2050      db = get_db()
   271                         
   272         1            1      try:
   273         1          804          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          379      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            1      last_stroke_id = 0
   289         1           67      if 'Last-Event-ID' in request.headers:
   290         1           44          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           99      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.002035 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           12      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            7      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            5      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         2001      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.00093 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           42      cursor = db.cursor()
    32         2          866      cursor.execute(sql, params)
    33         2           22      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000571 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          569      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            1      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000373 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          373      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003382 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         1996      db = get_db()
   271                         
   272         1            1      try:
   273         1          816          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          387      room = get_room(db, id)
   281                         
   282         1            1      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            0      last_stroke_id = 0
   289         1           60      if 'Last-Event-ID' in request.headers:
   290         1           38          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           82      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001983 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1           10      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1943      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000947 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           41      cursor = db.cursor()
    32         2          877      cursor.execute(sql, params)
    33         2           29      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.00058 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          577      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            1      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000382 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          382      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.00343 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2085      db = get_db()
   271                         
   272         1            1      try:
   273         1          751          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          393      room = get_room(db, id)
   281                         
   282         1            1      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            1      last_stroke_id = 0
   289         1           70      if 'Last-Event-ID' in request.headers:
   290         1           40          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            0      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296         ke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           95      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001899 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1           38      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            7      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         1831      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000962 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           42      cursor = db.cursor()
    32         2          899      cursor.execute(sql, params)
    33         2           21      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000559 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          555      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            1      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000422 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          421      return select_one(db, sql, {'room_id': room_id})

csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          543      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            1      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000388 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          388      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003483 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2018      db = get_db()
   271                         
   272         1            0      try:
   273         1          819          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          423      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            0      last_stroke_id = 0
   289         1           62      if 'Last-Event-ID' in request.headers:
   290         1           72          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           93      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001938 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           16      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         1897      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000875 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           41      cursor = db.cursor()
    32         2          813      cursor.execute(sql, params)
    33         2           21      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000516 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          513      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            1      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000374 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          373      return select_one(db, sql, {'room_id': room_id})

=======
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         1956      db = get_db()
   271                         
   272         1            1      try:
   273         1          751          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          381      room = get_room(db, id)
   281                         
   282         1            1      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            1      last_stroke_id = 0
   289         1           60      if 'Last-Event-ID' in request.headers:
   290         1           39          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            0      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1          109      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.00194 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1903      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclas_room
Total time: 0.000456 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          456      return select_one(db, sql, {'room_id': room_id})

                                 new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1          105      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001915 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            5      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         1880      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000937 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           42      cursor = db.cursor()
    32         2          874      cursor.execute(sql, params)
    33         2           21      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000536 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          533      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000416 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          416      return select_one(db, sql, {'room_id': room_id})

tcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           94      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.002083 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           12      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            7      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         2048      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.00092 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           44      cursor = db.cursor()
    32         2          856      cursor.execute(sql, params)
    33         2           20      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000549 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            0      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          548      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000384 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          384      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003275 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         1959      db = get_db()
   271                         
   272         1            1      try:
   273         1          763          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          367      room = get_room(db, id)
   281                         
   282         1            1      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            1      last_stroke_id = 0
   289         1           60      if 'Last-Event-ID' in request.headers:
   290         1           38          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                         
   304                         	strokes = get_strokes(db, room['id'], last_stroke_id)
   305                                 # app.logger.info(strokes)
   306                         
   307                         	for stroke in strokes:
   308                         	stroke['points'] = get_stroke_points(db, stroke['id'])
   309                         	yield print_and_flush(
   310                         			'id:' + str(stroke['id']) + '\n\n' +
   311                         			'event:stroke\n' +
   312                         			'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   313                         			)
   314                         	last_stroke_id = stroke['id']
   315                         
   316                         	update_room_watcher(db, room['id'], token['id'])
   317                         	new_watcher_count = get_watcher_count(db, room['id'])
   318                         	if new_watcher_count != watcher_count:
   319                         	watcher_count = new_watcher_count
   320                         	yield print_and_flush(
   321                         			'event:watcher_count\n' +
   322                         			'data:%d\n\n' % (watcher_count)
   323                         			)
   324                         
   325                             return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001947 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1 =======
    30                         def select_one(db, sql, params={}):
    31         2           43      cursor = db.cursor()
    32         2          879      cursor.execute(sql, params)
    33         2           32      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000537 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            0      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          534      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            1      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000432 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          431      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.004247 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2611      db = get_db()
   271                         
   272         1            1      try:
   273         1         1050          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          398      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            1      last_stroke_id = 0
   289         1           62      if 'Last-Event-ID' in request.headers:
   290         1           39          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           84      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.002598 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            5      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         2563      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.001158 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           56      cursor = db.cursor()
    32         2         1069      cursor.execute(sql, params)
    33         2           33      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000792 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            0      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          789      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            1      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000383 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          382      return select_one(db, sql, {'room_id': room_id})

        1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000354          0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000456 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          455      return select_one(db, sql, {'room_id': room_id})

                   watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           90      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001965 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           12      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1930      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.001002 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           51      cursor = db.cursor()
    32         2          931      cursor.execute(sql, params)
    33         2           20      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000657 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          655      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000358 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          358      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003141 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         1841      db = get_db()
   271                         
   272         1            0      try:
   273         1          752          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 retatcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           93      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001905 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           12      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            7      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1871      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000829 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           43      cursor = db.cursor()
    32         2          767      cursor.execute(sql, params)
    33         2           19      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000519 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          517      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000323 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          322      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003514 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2109      db = get_db()
   271                         
   272         1            0      try:
   273         1          828          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          394      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            0      last_stroke_id = 0
   289         1           61      if 'Last-Event-ID' in request.headers:
   290         1           38          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           83      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.002091 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1           11      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         2043      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000959 [sec]
  Line      Hits         Time  Code
====================      new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           83      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.002277 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            5      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         2242      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000923 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           39      cursor = db.cursor()
    32         2          851      cursor.execute(sql, params)
    33         2           33      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000488 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          487      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000449 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          449      return select_one(db, sql, {'room_id': room_id})

   def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           84      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001822 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           14      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         1784      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.00094 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           44      cursor = db.cursor()
    32         2          875      cursor.execute(sql, params)
    33         2           21      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.00055 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          548      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000419 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          419      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.00344 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2040      db = get_db()
   271                         
   272         1            0      try:
   273         1          805          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          342      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            0      last_stroke_id = 0
   289         1          110      if 'Last-Event-ID' in request.headers:
   290         1           46          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           96      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.002025 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           14      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         1988      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000875 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           42      cursor = db.cursor()
    32         2          813      cursor.execute(sql, params)
    33         2           20      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000553 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          552      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000336 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          336      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003408 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         1992      db = get_db()
   271                         
   272         1            1      try:
   273         1          831          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          375      room = get_room(db, id)
   281                         
   282         1            1      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            0      last_stroke_id = 0
   289         1           68      if 'Last-Event-ID' in request.headers:
   290         1           44          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           95      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001977 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           12      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            7      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         1945      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000929 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           42      cursor = db.cursor()
    32         2          868      cursor.execute(sql, params)
    33         2           19      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000575 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1          107      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001919 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            5      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1883      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000866 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           40      cursor = db.cursor()
    32         2          806      cursor.execute(sql, params)
    33         2           20      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000551 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          548      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            1      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000328 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          328      return select_one(db, sql, {'room_id': room_id})

         1          410      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003359 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         1991      db = get_db()
   271                         
   272         1            1      try:
   273         1          759          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          423      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            0      last_stroke_id = 0
   289         1           62      if 'Last-Event-ID' in request.headers:
   290         1           39          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           83      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001977 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           15      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1           10      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            7      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1934      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000903 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           57      cursor = db.cursor()
    32         2          826      cursor.execute(sql, params)
    33         2           20      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000525 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          524      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000389 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          389      return select_one(db, sql, {'room_id': room_id})

             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           84      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001832 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            5      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         1798      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000946 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           54      cursor = db.cursor()
    32         2          870      cursor.execute(sql, params)
    33         2           22      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.00061 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          606      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            1      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000352 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          352      return select_one(db, sql, {'room_id': room_id})

t_one
Total time: 0.000944 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           42      cursor = db.cursor()
    32         2          883      cursor.execute(sql, params)
    33         2           19      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000565 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          563      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000394 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          394      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003515 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2000      db = get_db()
   271                         
   272         1            1      try:
   273         1          848          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          381      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            1      last_stroke_id = 0
   289         1           67      if 'Last-Event-ID' in request.headers:
   290         1           44          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1          172      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001984 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1948      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000934 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           44      cursor = db.cursor()
    32         2          869      cursor.execute(sql, params)
    33         2           21      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000574 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          572      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000377 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          376      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003669 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2143      db = get_db()
   271                         
   272         1            0      try:
   273         1          907          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          349      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            0      last_stroke_id = 0
   289         1           60      if 'Last-Event-ID' in request.headers:
   290         1           91          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1          118      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.00213 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            5      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         2095      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000972 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           41      cursor = db.cursor()
    32         2          896      cursor.execute(sql, params)
    33         2           35      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000639 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          637      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000345 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          345      return select_one(db, sql, {'room_id': room_id})


   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           84      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001788 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           12      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            5      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         1753      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000905 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           40      cursor = db.cursor()
    32         2          845      cursor.execute(sql, params)
    33         2           20      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000594 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          582      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1           11      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000335 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          334      return select_one(db, sql, {'room_id': room_id})

  316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                      03         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          555      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            1      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000445 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          445      return select_one(db, sql, {'room_id': room_id})

     return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003844 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2328      db = get_db()
   271                         
   272         1            0      try:
   273         1          869          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          418      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            1      last_stroke_id = 0
   289         1           68      if 'Last-Event-ID' in request.headers:
   290         1           43          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1          116      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.002168 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1           11      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         2127      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.001037 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           44      cursor = db.cursor()
    32         2          973      cursor.execute(sql, params)
    33         2           20      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000639 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          636      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            1      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000413 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          413      return select_one(db, sql, {'room_id': room_id})

t = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            7      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1978      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.00097 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           45      cursor = db.cursor()
    32         2          904      cursor.execute(sql, params)
    33         2           21      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000594 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          592      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000391 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          390      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003247 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         1895      db = get_db()
   271                         
   272         1            1      try:
   273         1          743          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          401      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            1      last_stroke_id = 0
   289         1           67      if 'Last-Event-ID' in request.headers:
   290         1           44          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           94      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001881 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           26      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1833      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000884 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           40      cursor = db.cursor()
    32         2          823      cursor.execute(sql, params)
    33         2           21      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000502 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          500      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000397 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          397      return select_one(db, sql, {'room_id': room_id})

                              stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           83      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001826 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           12      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1792      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000995 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           42      cursor = db.cursor()
    32         2          932      cursor.execute(sql, params)
    33         2           21      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000633 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          631      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000389 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          388      return select_one(db, sql, {'room_id': room_id})

               yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1          104      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.002174 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           16      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1           25      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            7      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         2116      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.001025 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           44      cursor = db.cursor()
    32         2          915      cursor.execute(sql, params)
    33         2           66      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000631 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          629      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000409 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          409      return select_one(db, sql, {'room_id': room_id})

.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            7      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         2328      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.001023 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           42      cursor = db.cursor()
    32         2          960      cursor.execute(sql, params)
    33         2           21      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000634 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          633      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000403 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          403      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003283 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         1868      db = get_db()
   271                         
   272         1            5      try:
   273         1          819          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          382      room = get_room(db, id)
   281                         
   282         1            1      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                 python/app.py
Name: get_room
Total time: 0.000328 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          328      return select_one(db, sql, {'room_id': room_id})

om_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           83      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001851 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           14      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1812      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000953 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           43      cursor = db.cursor()
    32         2          890      cursor.execute(sql, params)
    33         2           20      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.00059 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          588      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000377 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          377      return select_one(db, sql, {'room_id': room_id})

        2020      db = get_db()
   271                         
   272         1            1      try:
   273         1          751          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          459      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            0      last_stroke_id = 0
   289         1           62      if 'Last-Event-ID' in request.headers:
   290         1           38          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           83      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.002005 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           14      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1966      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000937 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           40      cursor = db.cursor()
    32         2          877      cursor.execute(sql, params)
    33         2           20      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000507 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          506      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000455 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          455      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.011987 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2277      db = get_db()
   271                         
   272         1            1      try:
   273         1         9009          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277       for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           86      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.002303 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         2267      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.00123 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           76      cursor = db.cursor()
    32         2         1134      cursor.execute(sql, params)
    33         2           20      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.00085 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          847      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000396 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          396      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003475 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2039      db = get_db()
   271                         
   272         1            1      try:
   273         1          790          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          381      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            0      last_stroke_id = 0
   289         1          124      if 'Last-Event-ID' in request.headers:
   290         1           46          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           93      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.002025 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            7      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         1987      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000949 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           75      cursor = db.cursor()
    32         2          854      cursor.execute(sql, params)
    33         2           20      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000586 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            0      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          583      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            1      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000377 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          377      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003559 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2134      db = get_db()
   271                         
   272         1            0      try:
   273         1          834          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          366      room = get_room(db, id)
   281                         
   282         1            1      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            0      last_stroke_id = 0
   289         1           63      if 'Last-Event-ID' in request.headers:
   290         1           39          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1          121      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.002121 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           14      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         2084      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000965 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           41      cursor = db.cursor()
    32         2          905      cursor.execute(sql, params)
    33         2           19      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000618 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          616      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000362 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          361      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003177 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         1832      db = get_db()
   271                         
   272         1            1      try:
   273         1          771          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          363      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            1      last_stroke_id = 0
   289         1           69      if 'Last-Event-ID' in request.headers:
   290         1           44          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           95      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001817 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            1      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1779      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000867 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           42      cursor = db.cursor()
    32         2          805      cursor.execute(sql, params)
    33         2           20      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000523 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          521      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000358 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          358      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003186 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         1887      db = get_db()
   271                         
   272         1            1      try:
   273         1          745          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276    sql, params={}):
    31         2           42      cursor = db.cursor()
    32         2          844      cursor.execute(sql, params)
    33         2           20      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000506 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          503      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000428 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          428      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003414 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2000      db = get_db()
   271                         
   272         1            0      try:
   273         1          821          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          407      room = get_room(db, id)
   281                         
   282         1            1      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            1      last_stroke_id = 0
   289         1           60      if 'Last-Event-ID' in request.headers:
   290         1           39          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           84      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001985 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1949      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000999 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           42      cursor = db.cursor()
    32         2          937      cursor.execute(sql, params)
    33         2           20      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000611 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          610      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000402 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          402      return select_one(db, sql, {'room_id': room_id})

   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           83      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001891 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           14      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         1854      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000892 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           43      cursor = db.cursor()
    32         2          829      cursor.execute(sql, params)
    33         2           20      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000554 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          552      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000352 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          352      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003536 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         1999      db = get_db()
   271                         
   272         1            0      try:
   273         1          887          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          423      room = get_room(db, id)
   281                         
   282         1            1      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            1      last_stroke_id = 0
   289         1           72      if 'Last-Event-ID' in request.headers:
   290         1           45          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1          107      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001987 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            0      autocommit = True
    21         1         1951      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.001018 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           43      cursor = db.cursor()
    32         2          955      cursor.execute(sql, params)
    33         2           20      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000613 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          611      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000419 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          418      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003329 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         1796      db = get_db()
   271                         
   272         1            1      try:
   273         1          760          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          524      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            1      last_stroke_id = 0
   289         1           75      if 'Last-Event-ID' in request.headers:
   290         1           45          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1          126      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.001781 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           15      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            7      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         1742      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000998 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           42      cursor = db.cursor()
    32         2          935      cursor.execute(sql, params)
    33         2           21      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000511 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          509      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000501 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          501      return select_one(db, sql, {'room_id': room_id})

AMP(6) - INTERVAL 1 DAY'
   105         1          551      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            0      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000377 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            1      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          376      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003586 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2129      db = get_db()
   271                         
   272         1            1      try:
   273         1          828          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          344      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            0      last_stroke_id = 0
   289         1          142      if 'Last-Event-ID' in request.headers:
   290         1           46          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            2      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           94      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.002116 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         2081      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000952 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2          115      cursor = db.cursor()
    32         2          818      cursor.execute(sql, params)
    33         2           19      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000628 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          624      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            1      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000339 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          339      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003412 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2068      db = get_db()
   271                         
   272         1            1      try:
   273         1          828          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          333      room = get_room(db, id)
   281                         
   282         1            0      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            0      last_stroke_id = 0
   289         1           59      if 'Last-Event-ID' in request.headers:
   290         1           39          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            1      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           83      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.002053 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           12      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            8      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            6      user = os.environ.get('MYSQL_USER', 'root')
    16         1            6      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            0      charset = 'utf8mb4'
    19         1            1      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         2019      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000889 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           40      cursor = db.cursor()
    32         2          830      cursor.execute(sql, params)
    33         2           19      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000575 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            1      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          572      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            0      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000329 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          329      return select_one(db, sql, {'room_id': room_id})

Time unit: 1e-06 [sec]

File: /home/isucon/webapp/python/app.py
Name: get_api_stream_rooms_id
Total time: 0.003662 [sec]
  Line      Hits         Time  Code
===================================
   268                         @app.route('/api/stream/rooms/<id>')
   269                         def get_api_stream_rooms_id(id):
   270         1         2262      db = get_db()
   271                         
   272         1            1      try:
   273         1          832          token = check_token(db, request.args.get('csrf_token'))
   274                             except TokenException:
   275                                 return print_and_flush(
   276                                     'event:bad_request\n' +
   277                                     'data:トークンエラー。ページを再読み込みしてください。\n\n'
   278                                 ), 200, {'Content-Type': 'text/event-stream'}
   279                         
   280         1          382      room = get_room(db, id)
   281                         
   282         1            1      if room is None:
   283                                 return print_and_flush(
   284                                     'event:bad_request\n' +
   285                                     'data:この部屋は存在しません\n\n'
   286                                 ), 200, {'Content-Type': 'text/event-stream'}
   287                         
   288         1            1      last_stroke_id = 0
   289         1           60      if 'Last-Event-ID' in request.headers:
   290         1           40          last_stroke_id = request.headers.get('Last-Event-ID')
   291                         
   292         1            0      def gen(db, room, token, last_stroke_id):
   293                         
   294                                 update_room_watcher(db, room['id'], token['id'])
   295                                 watcher_count = get_watcher_count(db, room['id'])
   296                         
   297                                 yield print_and_flush(
   298                                     'retry:500\n\n' +
   299                                     'event:watcher_count\n' +
   300                                     'data:%d\n\n' % (watcher_count)
   301                                 )
   302                         
   303                                 for loop in range(6):
   304                                     time.sleep(0.5)  # 500ms
   305                         
   306                                     strokes = get_strokes(db, room['id'], last_stroke_id)
   307                                     # app.logger.info(strokes)
   308                         
   309                                     for stroke in strokes:
   310                                         stroke['points'] = get_stroke_points(db, stroke['id'])
   311                                         yield print_and_flush(
   312                                             'id:' + str(stroke['id']) + '\n\n' +
   313                                             'event:stroke\n' +
   314                                             'data:' + json.dumps(type_cast_stroke_data(stroke)) + '\n\n'
   315                                         )
   316                                         last_stroke_id = stroke['id']
   317                         
   318                                     update_room_watcher(db, room['id'], token['id'])
   319                                     new_watcher_count = get_watcher_count(db, room['id'])
   320                                     if new_watcher_count != watcher_count:
   321                                         watcher_count = new_watcher_count
   322                                         yield print_and_flush(
   323                                             'event:watcher_count\n' +
   324                                             'data:%d\n\n' % (watcher_count)
   325                                         )
   326                         
   327         1           83      return Response(gen(db, room, token, last_stroke_id), mimetype='text/event-stream')

File: /home/isucon/webapp/python/app.py
Name: get_db
Total time: 0.002246 [sec]
  Line      Hits         Time  Code
===================================
    12                         def get_db():
    13         1           13      host = os.environ.get('MYSQL_HOST', 'localhost')
    14         1            9      port = int(os.environ.get('MYSQL_PORT', 3306))
    15         1            7      user = os.environ.get('MYSQL_USER', 'root')
    16         1            7      passwd = os.environ.get('MYSQL_PASS', '')
    17         1            0      dbname = 'isuketch'
    18         1            1      charset = 'utf8mb4'
    19         1            2      cursorclass = MySQLdb.cursors.DictCursor
    20         1            1      autocommit = True
    21         1         2206      return MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=dbname, cursorclass=cursorclass, charset=charset, autocommit=autocommit)

File: /home/isucon/webapp/python/app.py
Name: select_one
Total time: 0.000961 [sec]
  Line      Hits         Time  Code
===================================
    30                         def select_one(db, sql, params={}):
    31         2           43      cursor = db.cursor()
    32         2          899      cursor.execute(sql, params)
    33         2           19      return cursor.fetchone()

File: /home/isucon/webapp/python/app.py
Name: check_token
Total time: 0.000597 [sec]
  Line      Hits         Time  Code
===================================
   102                         def check_token(db, csrf_token):
   103         1            0      sql = 'SELECT `id`, `csrf_token`, `created_at` FROM `tokens`'
   104         1            1      sql += ' WHERE `csrf_token` = %(csrf_token)s AND `created_at` > CURRENT_TIMESTAMP(6) - INTERVAL 1 DAY'
   105         1          594      token = select_one(db, sql, {'csrf_token': csrf_token})
   106         1            1      if not token:
   107                                 raise TokenException()
   108         1            1      return token

File: /home/isucon/webapp/python/app.py
Name: get_room
Total time: 0.000378 [sec]
  Line      Hits         Time  Code
===================================
   122                         def get_room(db, room_id):
   123         1            0      sql = 'SELECT `id`, `name`, `canvas_width`, `canvas_height`, `created_at` FROM `rooms` WHERE `id` = %(room_id)s'
   124         1          378      return select_one(db, sql, {'room_id': room_id})

